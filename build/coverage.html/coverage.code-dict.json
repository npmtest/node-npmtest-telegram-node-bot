{"/home/travis/build/npmtest/node-npmtest-telegram-node-bot/test.js":"/* istanbul instrument in package npmtest_telegram_node_bot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/lib.npmtest_telegram_node_bot.js":"/* istanbul instrument in package npmtest_telegram_node_bot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_telegram_node_bot = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_telegram_node_bot = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-telegram-node-bot && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_telegram_node_bot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_telegram_node_bot\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_telegram_node_bot.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_telegram_node_bot.rollup.js'] =\n            local.assetsDict['/assets.npmtest_telegram_node_bot.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_telegram_node_bot.__dirname + '/lib.npmtest_telegram_node_bot.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/Telegram.js":"'use strict'\n\nconst TelegramApi = require('./api/TelegramApi')\nconst TelegramRouter = require('./routing/TelegramRouter')\nconst ConsoleLogger = require('./logger/ConsoleLogger')\nconst TelegramDataSource = require('./TelegramDataSource')\nconst UpdateProcessorsManager = require('./updateProcessors/UpdateProcessorsManager')\nconst InMemoryStorage = require('./storage/session/InMemoryStorage')\nconst TelegramSessionStorage = require('./storage/session/TelegramSessionStorage')\nconst TelegramBaseController = require('./mvc/TelegramBaseController')\nconst TelegramBaseCallbackQueryController = require('./mvc/TelegramBaseCallbackQueryController')\nconst TelegramBaseInlineQueryController = require('./mvc/TelegramBaseInlineQueryController')\nconst Models = require('./models/Models')\nconst Update = require('./models/Update')\nconst Ivan = require('./localization/Ivan')\nconst Scope = require('./mvc/Scope')\nconst InputFile = require('./api/InputFile')\nconst InlineScope = require('./mvc/InlineScope')\nconst BaseStorage = require('./storage/BaseStorage')\nconst BaseLogger = require('./logger/BaseLogger')\nconst BaseScopeExtension = require('./mvc/BaseScopeExtension')\nconst BaseUpdateProcessor = require('./updateProcessors/BaseUpdateProcessor')\nconst BaseUpdateFetcher = require('./updateFetchers/BaseUpdateFetcher')\n\nconst cluster = require('cluster')\nconst os = require('os')\nconst SharedStorage = require('./storage/sharedStorage/SharedStorage')\nconst TelegramIPC = require('./ipc/TelegramIPC')\n\nconst WebAdmin = require('./webAdmin/server/WebAdmin')\n\nconst WebhookUpdateFetcher = require('./updateFetchers/WebhookUpdateFetcher')\nconst LongPoolingUpdateFetcher = require('./updateFetchers/LongPoolingUpdateFetcher')\n\nconst WebAdminLogger = require('./logger/WebAdminLogger')\nconst Statistics = require('./statistics/Statistics')\n\nconst BaseCommand = require('./routing/commands/BaseCommand')\nconst TextCommand = require('./routing/commands/TextCommand')\nconst RegexpCommand = require('./routing/commands/RegexpCommand')\n\nclass Telegram {\n    /**\n     *\n     * @param {string} token\n     * @param {{\n     * logger: BaseLogger,\n     * storage: BaseStorage,\n     * localization: Object[],\n     * workers: number,\n     * webhook: {url: string, port: number, host: string }\n     * updateFetcher: BaseUpdateFetcher\n     * webAdmin: {port: number, host: string}\n     * }} options\n     */\n    constructor(token, options) {\n        options = options || {}\n\n        this._token = token\n        this._logger = options.logger || new WebAdminLogger()\n        this._storage = options.storage || new InMemoryStorage()\n        this._sharedStorage = new SharedStorage(this._storage)\n        this._localization = new Ivan(this._sharedStorage, (options.localization || []))\n        this._webAdminPort = options.webAdmin ? options.webAdmin.port : 7777\n        this._webAdminHost = options.webAdmin ? options.webAdmin.host : 'localhost'\n\n        this._cpus = os.cpus()\n        this._workersCount = options.workers || this._cpus.length\n\n        this._ipc = new TelegramIPC()\n\n        this._telegramDataSource = new TelegramDataSource(\n            new TelegramApi(token, this._logger),\n            new TelegramRouter(),\n            this._logger,\n            new TelegramSessionStorage(this._sharedStorage),\n            this._localization,\n            this._ipc\n        )\n\n        this._beforeUpdateFunction = null\n\n        this._checkNodeVersion()\n\n        this._updatesFetcher = null\n\n        if (options.updateFetcher)\n            this._updatesFetcher = options.updateFetcher\n        else if (options.webhook) {\n            this._updatesFetcher = new WebhookUpdateFetcher(\n                this._telegramDataSource.api,\n                this._logger,\n                options.webhook.url,\n                options.webhook.host,\n                options.webhook.port,\n                token\n            )\n        }\n        else {\n            this._updatesFetcher = new LongPoolingUpdateFetcher(\n                this._telegramDataSource.api,\n                this._logger\n            )\n        }\n\n        this._setup()\n    }\n\n    _checkNodeVersion() {\n        if (process.version.replace('v', '').split('.')[0] < 6) {\n            this._logger.error({\n                'Fatal error': 'Node version must be 6 or greater, please update your Node.js'\n            })\n\n            process.exit()\n        }\n    }\n\n    _setup() {\n        if (cluster.isMaster)\n            this._master()\n\n        if (cluster.isWorker)\n            this._worker()\n    }\n\n    _master() {\n        this._logger.log({\n            'Telegram': `Master started, ${this._cpus.length} CPUs found, ${this._workersCount} workers will start`\n        })\n\n        this._waitingUpdates = {} // each worker can ask master to send him next update from specific chat\n        this._waitingCallbacks = {}\n        this._workers = {}\n        this.statistics = new Statistics()\n \n        new WebAdmin(\n            this._webAdminHost,\n            this._webAdminPort,\n            __dirname + '/webAdmin/client',\n            this._logger,\n            this\n        )\n \n        this._runWorkers()\n\n        this._updatesFetcher.fetch(updates => {\n            this._processUpdates(updates)\n        })\n    }\n\n    _worker() {\n        this._updateProcessor = new UpdateProcessorsManager(this._telegramDataSource)\n\n        process.on('message', msg => {\n            if (msg.type == 'update') {\n                this._processUpdates([Update.deserialize(msg.update)])\n                return\n            }\n\n            this._sharedStorage.handleMessageFromMaster(msg)\n        })\n    }\n\n    _fork() {\n        return cluster.fork()\n    }\n    \n    restartWorkers() {\n        this._logger.log({ 'Telegram': 'restarting workers' })\n\n        for (const pid in this._workers) {\n            if (this._workers[pid])\n                this._workers[pid].kill()\n        }\n    }\n\n    /**\n     * This callback will be called from master process\n     *\n     * @param {Function} callback\n     */\n    onMaster(callback) {\n        if (cluster.isMaster)\n            callback()\n    }\n    \n    _runWorkers() {  \n        for(var i = 0; i < this._workersCount; i++) {\n            this._runWorker()\n        } \n\n        cluster.on('online', w =>  this._logger.log({ 'Telegram': `Worker started at ${w.process.pid} PID`}))\n\n        cluster.on('exit', (worker, code, signal) => {\n            this._workers[worker.process.pid] = null\n\n            this._logger.log({\n                'Telegram': `Worker ${worker.process.pid} died with code: ${code}, and signal: ${signal}, Starting a new worker`\n            })\n            this._runWorker()\n            this.statistics.workerDied(worker.process.pid)\n        })\n    }\n\n    _runWorker() {\n        let worker = this._fork()\n        this._workers[worker.process.pid] = worker\n        this.statistics.addWorker(worker.process.pid)\n\n        let self = this\n\n        worker.on('message', function(msg) {\n            if (msg.type == 'waitForUpdate') {\n                self._waitingUpdates[msg.chatId] = worker\n                return\n            }\n\n            if (msg.type == 'waitForCallbackQuery') {\n                self._waitingCallbacks[msg.data] = worker\n            }\n\n            self._sharedStorage.handleMessageFromWorkers(msg, this)\n        })\n    }\n\n    /**\n     * Pass child of BaseScopeExtension or array of children to use that extensions\n     *\n     * @param {BaseScopeExtension|BaseScopeExtension[]} extension\n     */\n    addScopeExtension(extension) {\n        this._telegramDataSource.addScopeExtension(extension)\n    }\n\n    /**\n     * @param {Update} update\n     */\n    emulateUpdate(update) {\n        this._updateProcessor.process(update)\n    }\n\n    /**\n     *\n     * @returns {TelegramApi}\n     */\n    get api() {\n        return this._telegramDataSource.api\n    }\n\n    /**\n     *\n     * @returns {TelegramRouter}\n     */\n    get router() {\n        return this._telegramDataSource.router\n    }\n\n    /**\n     *\n     * @returns {BaseLogger}\n     */\n    get logger() {\n        return this._telegramDataSource.logger\n    }\n\n    /**\n     *\n     * @returns {TelegramSessionStorage}\n     */\n    get sessionStorage() {\n        return this._telegramDataSource.sessionStorage\n    }\n\n    /**\n     * @callback continueCallback\n     * @param {boolean} handle\n     */\n\n    /**\n     * @callback beforeHandler\n     * @param {Update} update\n     * @param {continueCallback} callback\n     */\n\n    /**\n     * Your handler function passed to this method will be called after getting\n     * any update, but before it's processing.\n     *\n     * Also to your function will be passed callback function,\n     * if you call that function with 'true' argument, then update handling will be continued,\n     * else the update will not be handled.\n     *\n     * @param {beforeHandler} handler\n     */\n    before(handler) {\n        this._beforeUpdateFunction = handler\n    }\n\n    /**\n     * @param {Update[]} updates\n     * @private\n     */\n    _processUpdates(updates) {\n        if (cluster.isMaster) {\n            updates.forEach(u => {\n                let worker\n\n\n                if (u.message && this._waitingUpdates[u.message.chat.id] != null)\n                    worker = this._waitingUpdates[u.message.chat.id]\n                else if (u.callbackQuery && this._waitingCallbacks[u.callbackQuery.data] != null)\n                    worker = this._waitingCallbacks[u.callbackQuery.data]\n                else\n                    worker = this._pickRandomWorker() //pick random worker for update\n\n                this.statistics.registrateRequest(worker.process.pid)\n                worker.send({ type: 'update', update: u.serialize() })\n\n                if (u.message)\n                    this._waitingUpdates[u.message.chat.id] = null\n\n            })\n\n            return\n        }\n\n        updates.forEach(update => {\n            if (!this._beforeUpdateFunction) {\n                this._updateProcessor.process(update)\n                return\n            }\n\n            this._beforeUpdateFunction(update, handle => {\n                if (handle === true) {\n                    this._updateProcessor.process(update)\n                }\n            })\n        })\n    }\n\n    _pickRandomWorker() {\n        const pids = Object.keys(this._workers).filter(pid => this._workers[pid] != null)\n        return this._workers[pids[Math.floor(Math.random() * pids.length)]]\n    }\n}\n\nmodule.exports = {\n    TelegramApi,\n    Telegram,\n    TelegramBaseController,\n    TelegramBaseCallbackQueryController,\n    TelegramBaseInlineQueryController,\n    Scope,\n    BaseLogger,\n    BaseScopeExtension,\n    InputFile,\n    InlineScope,\n    BaseStorage,\n    BaseUpdateFetcher,\n    BaseCommand,\n    TextCommand,\n    RegexpCommand,\n    Models\n}\n","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/api/TelegramApi.js":"'use strict'\n\nconst req = require('tiny_request')\nconst CallbackQueue = require('../utils/CallbackQueue')\nconst TelegramApiRequest = require('./TelegramApiRequest')\nconst Models = require('../models/Models')\nconst Message = require('../models/Message')\nconst File = require('../models/File')\nconst UserProfilePhotos = require('../models/UserProfilePhotos')\nconst User = require('../models/User')\nconst Update = require('../models/Update')\nconst Chat = require('../models/Chat')\nconst ChatMember = require('../models/ChatMember')\nconst InputFile = require('./InputFile')\nconst TelegramApiError = require('./TelegramApiError')\nconst GameHighScore = require('../models/GameHighScore')\n\nconst REQUESTS_PER_SECOND = 30\nconst REQUEST_RETRY_TIMEOUT = 1000 //ms\n\n/**\n * Telegram API class\n */\nclass TelegramApi {\n    /**\n     *\n     * @param {string} token\n     * @param {BaseLogger} logger\n     */\n    constructor(token, logger) {\n        this._token = token\n        this._url = `https://api.telegram.org/bot${this._token}/`\n        this._queue = new CallbackQueue(REQUESTS_PER_SECOND)\n        this._logger = logger\n    }\n\n    /**\n     *\n     * @param {string} method\n     * @returns {string}\n     * @private\n     */\n    _urlForMethod(method) {\n        return this._url + method\n    }\n\n    /**\n     * \n     * @param {string} method\n     * @param {object} params\n     * @param {object} [multipart]\n     * @returns {Promise<Object>}\n     */\n    call(method, params, multipart) {\n        return new Promise((resolve, reject) => {\n            const request = new TelegramApiRequest(method, params, multipart)\n\n            this._queue.push(() => {\n                this._handleRequest(request, resolve, reject)\n            })\n        })\n    }\n\n    /**\n     *\n     * @param {string} method\n     * @param {Object} params\n     * @param {function} type\n     * @param {object} [multipart]\n     * @returns {Promise}\n     * @private\n     */\n    _callWithReturnType(method, params, type, multipart) {\n        return this.call(method, params, multipart)\n            .then(response => {\n                return type.deserialize(response.result)\n            })\n    }\n\n    /**\n     *\n     * @param {TelegramApiRequest }request\n     * @param {function} resolve\n     * @param {function} reject\n     * @private\n     */\n    _handleRequest(request, resolve, reject) {\n        req.post({\n            url: this._urlForMethod(request.method),\n            form: request.multipart ? null : request.params,\n            query: request.multipart ? request.params : null,\n            multipart: request.multipart,\n            json: true\n        }, (body, response, err) => {\n            if (!err && response.statusCode == 200 && body) {\n                resolve(body)\n                return\n            }\n\n            if (err && err.code) {\n                this._logger.error({'Network error:': err, 'request': request })\n                this._retryRequest(request, resolve, reject)\n\n                return\n            }\n\n            if (body && body.error_code) {\n                const error = TelegramApiError.fromResponse(body)\n\n                if (error.code == 500) {\n                    this._logger.warn({ 'Got Internal server error from Telegram. Body:': body })\n                    this._retryRequest(request, resolve, reject)\n\n                    return\n                }\n\n                reject(error)\n                this._logger.warn({ 'Api error: Body:': body })\n\n                return\n            }\n\n            if (err.message === 'Unexpected token < in JSON at position 0') {\n                this._logger.error({\n                    'api request error: Telegram returned some html instead of json. Body:': body,\n                    'Error:': err\n                })\n                this._retryRequest(request, resolve, reject)\n\n                return\n            }\n\n            this._logger.error({'api request error: Body:': body, 'Error:': err })\n            reject(err)\n        })\n    }\n\n    /**\n     *\n     * @param {TelegramApiRequest }request\n     * @param {function} resolve\n     * @param {function} reject\n     * @private\n     */\n    _retryRequest(request, resolve, reject) {\n        setTimeout(() => {\n            this._queue.push(() => {\n                this._logger.log({ 'Retry request': request })\n                this._handleRequest(request, resolve, reject)\n            })\n        }, REQUEST_RETRY_TIMEOUT)\n    }\n\n    /**\n     *\n     * @param {string} method\n     * @param {InputFile|Object} inputFile\n     * @param {string} type\n     * @param {Object} params\n     * @returns {Promise}\n     * @private\n     */\n    _callWithInputFile(method, inputFile, type, params) {\n        const file = inputFile instanceof InputFile ? inputFile : InputFile.deserialize(inputFile)\n        let sentCallback = Function()\n\n        return file.prepareRequest(type, params)\n            .then(prepared =>  {\n                sentCallback = prepared.callback || Function()\n                \n                return this._callWithReturnType(\n                    method,\n                    prepared.params,\n                    Message,\n                    prepared.multipart\n                )\n            })\n            .then(r => {\n                sentCallback()\n                \n                return r\n            })\n    }\n\n    /**\n     *\n     * @param {Object} [options]\n     * @returns {Promise<Update[]>}\n     */\n    getUpdates(options) {\n        return this.call('getUpdates', options)\n            .then(r => r.result.map(u => Update.deserialize(u)))\n    }\n\n    /**\n     *\n     * @param options\n     * @returns {Promise<Object>}\n     */\n    setWebhook(options) {\n        return this._callWithReturnType('setWebhook', {\n            url: options.url ? options.url + '/' + this._token : ''\n        }, Models.Update)\n    }\n\n    /**\n     *\n     * @returns {Promise<User>}\n     */\n    getMe() {\n        return this._callWithReturnType('getMe', {}, User)\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @param {string} text\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendMessage(chatId, text, options) {\n        const params = {\n            chat_id: chatId,\n            text: text\n        }\n\n        if (text.length > 4096) {\n            this.sendMessage(chatId, text.slice(0, 4096), options)\n                .then(() => {\n                    this.sendMessage(chatId, text.slice(4096, text.length), options)\n                })\n        } else {\n            return this._callWithReturnType('sendMessage', Object.assign(params, options), Message)\n        }\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @param {number} fromChatId\n     * @param {number} messageId\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    forwardMessage(chatId, fromChatId, messageId, options) {\n        const params = {\n            chat_id: chatId,\n            from_chat_id: fromChatId,\n            message_id: messageId\n        }\n\n        return this._callWithReturnType('forwardMessage', Object.assign(params, options), Message)\n    }\n\n    /**\n     * \n     * @param {number|string} chatId\n     * @param {InputFile|Object} photo\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendPhoto(chatId, photo, options) {\n        return this._callWithInputFile(\n            'sendPhoto',\n            photo,\n            'photo',\n            Object.assign(\n                { chat_id: chatId },\n                options\n            )\n        )\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @param {InputFile|Object} audio\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendAudio(chatId, audio, options) {\n        return this._callWithInputFile(\n            'sendAudio',\n            audio,\n            'audio',\n            Object.assign(\n                { chat_id: chatId },\n                options\n            )\n        )\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @param {InputFile|Object} document\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendDocument(chatId, document, options) {\n        return this._callWithInputFile(\n            'sendDocument',\n            document,\n            'document',\n            Object.assign(\n                { chat_id: chatId },\n                options\n            )\n        )\n    }\n\n    /**\n     * \n     * @param {number|string} chatId\n     * @param {InputFile|Object} sticker\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendSticker(chatId, sticker, options) {\n        return this._callWithInputFile(\n            'sendSticker',\n            sticker,\n            'sticker',\n            Object.assign(\n                { chat_id: chatId },\n                options\n            )\n        )\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @param {InputFile|Object} video\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendVideo(chatId, video, options) {\n        return this._callWithInputFile(\n            'sendVideo',\n            video,\n            'video',\n            Object.assign(\n                { chat_id: chatId },\n                options\n            )\n        )\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @param {InputFile|Object} voice\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendVoice(chatId, voice, options) {\n        return this._callWithInputFile(\n            'sendVoice',\n            voice,\n            'voice',\n            Object.assign(\n                { chat_id: chatId },\n                options\n            )\n        )\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @param {number} latitude\n     * @param {number} longitude\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendLocation(chatId, latitude, longitude, options) {\n        const params = {\n            chat_id: chatId,\n            latitude: latitude,\n            longitude: longitude\n        }\n        \n        return this._callWithReturnType('sendLocation', Object.assign(params, options), Message)\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @param {number} latitude\n     * @param {number} longitude\n     * @param {string} title\n     * @param {string}address\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendVenue(chatId, latitude, longitude, title, address, options) {\n        const params = {\n            chat_id: chatId,\n            latitude: latitude,\n            longitude: longitude,\n            title: title,\n            address: address\n        }\n\n        return this._callWithReturnType('sendVenue', Object.assign(params, options), Message)\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @param {string} phoneNumber\n     * @param {string} firstName\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendContact(chatId, phoneNumber, firstName, options) {\n        const params = {\n            chat_id: chatId,\n            phone_number: phoneNumber,\n            first_name: firstName\n        }\n\n        return this._callWithReturnType('sendContact', Object.assign(params, options), Message)\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @param {string} action\n     * @returns {Promise<Object>}\n     */\n    sendChatAction(chatId, action) {\n        return this.call('sendChatAction', {\n            chat_id: chatId,\n            action: action\n        })\n    }\n\n    /**\n     *\n     * @param {number} userId\n     * @param {number} offset\n     * @param {number} limit\n     * @returns {Promise<UserProfilePhotos>}\n     */\n    getUserProfilePhotos(userId, offset, limit) {\n        return this._callWithReturnType('getUserProfilePhotos', {\n            user_id: userId,\n            ofsset: offset,\n            limit: limit\n        }, UserProfilePhotos)\n    }\n\n    /**\n     *\n     * @param {number} fileId\n     * @returns {Promise<File>}\n     */\n    getFile(fileId) {\n        return this._callWithReturnType('getFile', { file_id: fileId }, File)\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @param {number} userId\n     * @returns {Promise<boolean>}\n     */\n    kickChatMember(chatId, userId) {\n        const params = {\n            chat_id: chatId,\n            user_id: userId\n        }\n\n        return this.call('kickChatMember', params)\n            .then(r => r.result)\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @returns {Promise<boolean>}\n     */\n    leaveChat(chatId) {\n        return this.call('leaveChat', { chat_id: chatId })\n            .then(r => r.result)\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @param {number} userId\n     * @returns {Promise<boolean>}\n     */\n    unbanChatMember(chatId, userId) {\n        const params = {\n            chat_id: chatId,\n            user_id: userId\n        }\n\n        return this.call('unbanChatMember', params)\n            .then(r => r.result)\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @returns {Promise<Chat>}\n     */\n    getChat(chatId) {\n        return this._callWithReturnType('getChat', { chat_id: chatId }, Chat)\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @returns {Promise<ChatMember[]>}\n     */\n    getChatAdministrators(chatId) {\n        return this.call('getChatAdministrators', { chat_id: chatId })\n            .then(r => r.result.map(m => ChatMember.deserialize(m)))\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @returns {Promise<number>}\n     */\n    getChatMembersCount(chatId) {\n        return this.call('getChatMembersCount', { chat_id: chatId })\n            .then(r => r.result)\n    }\n\n    /**\n     *\n     * @param {number|string} chatId\n     * @param {number} userId\n     * @returns {Promise<ChatMember>}\n     */\n    getChatMember(chatId, userId) {\n        const params = {\n            chat_id: chatId,\n            user_id: userId\n        }\n\n        return this._callWithReturnType('getChatMember', params, ChatMember)\n    }\n\n    /**\n     *\n     * @param {string} callbackQueryId\n     * @param {Object} [options]\n     * @returns {Promise<boolean>}\n     */\n    answerCallbackQuery(callbackQueryId, options) {\n        const params = {\n            callback_query_id: callbackQueryId\n        }\n\n        return this.call('answerCallbackQuery', Object.assign(params, options))\n            .then(r => r.result)\n    }\n\n    /**\n     *\n     * @param {string} text\n     * @param {Object} options\n     * @returns {Promise<boolean|Message>}\n     */\n    editMessageText(text, options) {\n        const params = {\n            text: text\n        }\n\n        return this.call('editMessageText', Object.assign(params, options))\n            .then(r => typeof r.result == 'boolean' ? r.require : Message.deserialize(r.result) )\n    }\n\n    /**\n     *\n     * @param {Object} options\n     * @returns {Promise<boolean|Message>}\n     */\n    editMessageCaption(options) {\n        return this.call('editMessageCaption', options)\n            .then(r => typeof r.result == 'boolean' ? r.require : Message.deserialize(r.result))\n    }\n\n    /**\n     *\n     * @param {Object} options\n     * @returns {Promise<boolean|Message>}\n     */\n    editMessageReplyMarkup(options) {\n        return this.call('editMessageReplyMarkup', options)\n            .then(r => typeof r.result == 'boolean' ? r.require : Message.deserialize(r.result))\n    }\n\n    /**\n     *\n     * @param {string} inlineQueryId\n     * @param {InlineQueryResult[]} results\n     * @param {Object} [options]\n     * @returns {Promise<boolean>}\n     */\n    answerInlineQuery(inlineQueryId, results, options) {\n        const params = {\n            inline_query_id: inlineQueryId,\n            results: JSON.stringify(results)\n        }\n\n        return this.call('answerInlineQuery', Object.assign(params, options))\n            .then(r => r.result)\n    }\n\n    /**\n     * @param {number|string} chatId\n     * @param {string} gameShortName\n     * @param {object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendGame(chatId, gameShortName, options) {\n        const params = {\n            chat_id: chatId,\n            game_short_name: gameShortName\n        }\n\n        return this._callWithReturnType('sendGame', Object.assign(params, options), Message)\n    }\n\n    /**\n     * @param {number} userId\n     * @param {number} score\n     * @param {Object} [options]\n     * @returns {Promise<boolean|Message>}\n     */\n    setGameScore(userId, score, options) {\n        const params = {\n            chat_id: chatId,\n            score: score\n        }\n\n        return this.call('setGameScore', Object.assign(params, options))\n            .then(r => typeof r.result == 'boolean' ? r.require : Message.deserialize(r.result))\n    }\n\n    getGameHighScores(userId, options) {\n        return this.call('getGameHighScores', Object.assign({ user_id: userId }, options))\n            .then(r => r.result.map(m => ChatMember.deserialize(m)))\n    }\n}\n\nmodule.exports = TelegramApi","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/utils/CallbackQueue.js":"'use strict'\n\nclass CallbackQueue {\n    /**\n     * \n     * @param {number} countPerSec\n     */\n    constructor(countPerSec){\n        this._delay = 1000 / countPerSec\n        this._queue = []\n        this._queueStarted = false\n\n        this._prepareQueue()\n    }\n\n    /**\n     * \n     * @param {function} func\n     */\n    push(func){\n        this._queue.push(func)\n\n        if(!this._queueStarted)\n            this._prepareQueue()\n    }\n\n    /**\n     * \n     * @private\n     */\n    _prepareQueue(){\n        if(this._queue.length != 0){\n            const func = this._queue.shift()\n\n            setTimeout(() => {\n                func()\n                this._prepareQueue()\n            }, this._queueStarted ? this._delay : 0)\n\n            this._queueStarted = true\n            return\n        }\n\n        this._queueStarted = false\n    }\n}\n\nmodule.exports = CallbackQueue","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/api/TelegramApiRequest.js":"'use strict'\n\n/**\n * TelegramApiRequest\n */\nclass TelegramApiRequest { \n    /**\n     *\n     * @param {string} method\n     * @param {Object} params\n     * @param {Object} [multipart]\n     */\n    constructor(method, params, multipart) {\n        this._method = method\n        this._params = params\n        this._multipart = multipart\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    get method() {\n        return this._method\n    }\n\n    /**\n     *\n     * @returns {Object}\n     */\n    get params() {\n        return this._params\n    }\n\n    /**\n     *\n     * @returns {Object}\n     */\n    get multipart() {\n        return this._multipart\n    }\n}\n\nmodule.exports = TelegramApiRequest","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/Models.js":"module.exports = {\n   Update: require('./Update'),\n   WebhookInfo: require('./WebhookInfo'),\n   User: require('./User'),\n   Chat: require('./Chat'),\n   Message: require('./Message'),\n   MessageEntity: require('./MessageEntity'),\n   PhotoSize: require('./PhotoSize'),\n   Audio: require('./Audio'),\n   Document: require('./Document'),\n   Sticker: require('./Sticker'),\n   Video: require('./Video'),\n   Voice: require('./Voice'),\n   Contact: require('./Contact'),\n   Location: require('./Location'),\n   Venue: require('./Venue'),\n   UserProfilePhotos: require('./UserProfilePhotos'),\n   File: require('./File'),\n   ReplyKeyboardMarkup: require('./ReplyKeyboardMarkup'),\n   KeyboardButton: require('./KeyboardButton'),\n   ReplyKeyboardRemove: require('./ReplyKeyboardRemove'),\n   InlineKeyboardMarkup: require('./InlineKeyboardMarkup'),\n   InlineKeyboardButton: require('./InlineKeyboardButton'),\n   CallbackQuery: require('./CallbackQuery'),\n   ForceReply: require('./ForceReply'),\n   ChatMember: require('./ChatMember'),\n   ResponseParameters: require('./ResponseParameters'),\n   InlineQuery: require('./InlineQuery'),\n   InlineQueryResultArticle: require('./InlineQueryResultArticle'),\n   InlineQueryResultPhoto: require('./InlineQueryResultPhoto'),\n   InlineQueryResultGif: require('./InlineQueryResultGif'),\n   InlineQueryResultMpeg4Gif: require('./InlineQueryResultMpeg4Gif'),\n   InlineQueryResultVideo: require('./InlineQueryResultVideo'),\n   InlineQueryResultAudio: require('./InlineQueryResultAudio'),\n   InlineQueryResultVoice: require('./InlineQueryResultVoice'),\n   InlineQueryResultDocument: require('./InlineQueryResultDocument'),\n   InlineQueryResultLocation: require('./InlineQueryResultLocation'),\n   InlineQueryResultVenue: require('./InlineQueryResultVenue'),\n   InlineQueryResultContact: require('./InlineQueryResultContact'),\n   InlineQueryResultGame: require('./InlineQueryResultGame'),\n   InlineQueryResultCachedPhoto: require('./InlineQueryResultCachedPhoto'),\n   InlineQueryResultCachedGif: require('./InlineQueryResultCachedGif'),\n   InlineQueryResultCachedMpeg4Gif: require('./InlineQueryResultCachedMpeg4Gif'),\n   InlineQueryResultCachedSticker: require('./InlineQueryResultCachedSticker'),\n   InlineQueryResultCachedDocument: require('./InlineQueryResultCachedDocument'),\n   InlineQueryResultCachedVideo: require('./InlineQueryResultCachedVideo'),\n   InlineQueryResultCachedVoice: require('./InlineQueryResultCachedVoice'),\n   InlineQueryResultCachedAudio: require('./InlineQueryResultCachedAudio'),\n   InputTextMessageContent: require('./InputTextMessageContent'),\n   InputLocationMessageContent: require('./InputLocationMessageContent'),\n   InputVenueMessageContent: require('./InputVenueMessageContent'),\n   InputContactMessageContent: require('./InputContactMessageContent'),\n   ChosenInlineResult: require('./ChosenInlineResult'),\n   Game: require('./Game'),\n   Animation: require('./Animation'),\n   GameHighScore: require('./GameHighScore'),\n   InputMessageContent: require('./InputMessageContent'),\n   InlineQueryResult: require('./InlineQueryResult'),\n}","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/Update.js":"'use strict'\n\nconst Message = require('./Message')\nconst InlineQuery = require('./InlineQuery')\nconst ChosenInlineResult = require('./ChosenInlineResult')\nconst CallbackQuery = require('./CallbackQuery')\n\n/**\n * This object represents an incoming update.At most one of the optional parameters can be present in any given update.\n */\n\nclass Update {\n   /**\n    *\n    * @param {number} updateId\n    * @param {Message|null} [message]\n    * @param {Message|null} [editedMessage]\n    * @param {Message|null} [channelPost]\n    * @param {Message|null} [editedChannelPost]\n    * @param {InlineQuery|null} [inlineQuery]\n    * @param {ChosenInlineResult|null} [chosenInlineResult]\n    * @param {CallbackQuery|null} [callbackQuery]\n   */\n   constructor(\n     updateId, \n     message, \n     editedMessage, \n     channelPost, \n     editedChannelPost, \n     inlineQuery, \n     chosenInlineResult, \n     callbackQuery\n   ) {\n       this._updateId = updateId\n       this._message = message\n       this._editedMessage = editedMessage\n       this._channelPost = channelPost\n       this._editedChannelPost = editedChannelPost\n       this._inlineQuery = inlineQuery\n       this._chosenInlineResult = chosenInlineResult\n       this._callbackQuery = callbackQuery\n   }\n\n   /**\n    * The update‘s unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you’re using Webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order.\n    * @returns {number}\n   */\n   get updateId() {\n       return this._updateId\n   }\n\n   /**\n    * New incoming message of any kind — text, photo, sticker, etc.\n    * @returns {Message|null}\n   */\n   get message() {\n       return this._message\n   }\n\n   /**\n    * New version of a message that is known to the bot and was edited\n    * @returns {Message|null}\n   */\n   get editedMessage() {\n       return this._editedMessage\n   }\n\n   /**\n    * New incoming channel post of any kind — text, photo, sticker, etc.\n    * @returns {Message|null}\n   */\n   get channelPost() {\n       return this._channelPost\n   }\n\n   /**\n    * New version of a channel post that is known to the bot and was edited\n    * @returns {Message|null}\n   */\n   get editedChannelPost() {\n       return this._editedChannelPost\n   }\n\n   /**\n    * New incoming inline query\n    * @returns {InlineQuery|null}\n   */\n   get inlineQuery() {\n       return this._inlineQuery\n   }\n\n   /**\n    * The result of an inline query that was chosen by a user and sent to their chat partner.\n    * @returns {ChosenInlineResult|null}\n   */\n   get chosenInlineResult() {\n       return this._chosenInlineResult\n   }\n\n   /**\n    * New incoming callback query\n    * @returns {CallbackQuery|null}\n   */\n   get callbackQuery() {\n       return this._callbackQuery\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {Update}\n    */\n   static deserialize(raw) {\n      return new Update(\n          raw['update_id'], \n          raw['message'] ? Message.deserialize(raw['message']) : null, \n          raw['edited_message'] ? Message.deserialize(raw['edited_message']) : null, \n          raw['channel_post'] ? Message.deserialize(raw['channel_post']) : null, \n          raw['edited_channel_post'] ? Message.deserialize(raw['edited_channel_post']) : null, \n          raw['inline_query'] ? InlineQuery.deserialize(raw['inline_query']) : null, \n          raw['chosen_inline_result'] ? ChosenInlineResult.deserialize(raw['chosen_inline_result']) : null, \n          raw['callback_query'] ? CallbackQuery.deserialize(raw['callback_query']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          update_id: this.updateId ? this.updateId : undefined, \n          message: this.message ? this.message.serialize() : undefined, \n          edited_message: this.editedMessage ? this.editedMessage.serialize() : undefined, \n          channel_post: this.channelPost ? this.channelPost.serialize() : undefined, \n          edited_channel_post: this.editedChannelPost ? this.editedChannelPost.serialize() : undefined, \n          inline_query: this.inlineQuery ? this.inlineQuery.serialize() : undefined, \n          chosen_inline_result: this.chosenInlineResult ? this.chosenInlineResult.serialize() : undefined, \n          callback_query: this.callbackQuery ? this.callbackQuery.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = Update","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/Message.js":"'use strict'\n\nconst User = require('./User')\nconst Chat = require('./Chat')\nconst MessageEntity = require('./MessageEntity')\nconst Audio = require('./Audio')\nconst Document = require('./Document')\nconst Game = require('./Game')\nconst PhotoSize = require('./PhotoSize')\nconst Sticker = require('./Sticker')\nconst Video = require('./Video')\nconst Voice = require('./Voice')\nconst Contact = require('./Contact')\nconst Location = require('./Location')\nconst Venue = require('./Venue')\n\n/**\n * This object represents a message.\n */\n\nclass Message {\n   /**\n    *\n    * @param {number} messageId\n    * @param {User|null} [from]\n    * @param {number} date\n    * @param {Chat} chat\n    * @param {User|null} [forwardFrom]\n    * @param {Chat|null} [forwardFromChat]\n    * @param {number|null} [forwardFromMessageId]\n    * @param {number|null} [forwardDate]\n    * @param {Message|null} [replyToMessage]\n    * @param {number|null} [editDate]\n    * @param {string|null} [text]\n    * @param {MessageEntity[]|null} [entities]\n    * @param {Audio|null} [audio]\n    * @param {Document|null} [document]\n    * @param {Game|null} [game]\n    * @param {PhotoSize[]|null} [photo]\n    * @param {Sticker|null} [sticker]\n    * @param {Video|null} [video]\n    * @param {Voice|null} [voice]\n    * @param {string|null} [caption]\n    * @param {Contact|null} [contact]\n    * @param {Location|null} [location]\n    * @param {Venue|null} [venue]\n    * @param {User|null} [newChatMember]\n    * @param {User|null} [leftChatMember]\n    * @param {string|null} [newChatTitle]\n    * @param {PhotoSize[]|null} [newChatPhoto]\n    * @param {boolean|null} [deleteChatPhoto]\n    * @param {boolean|null} [groupChatCreated]\n    * @param {boolean|null} [supergroupChatCreated]\n    * @param {boolean|null} [channelChatCreated]\n    * @param {number|null} [migrateToChatId]\n    * @param {number|null} [migrateFromChatId]\n    * @param {Message|null} [pinnedMessage]\n   */\n   constructor(\n     messageId, \n     from, \n     date, \n     chat, \n     forwardFrom, \n     forwardFromChat, \n     forwardFromMessageId, \n     forwardDate, \n     replyToMessage, \n     editDate, \n     text, \n     entities, \n     audio, \n     document, \n     game, \n     photo, \n     sticker, \n     video, \n     voice, \n     caption, \n     contact, \n     location, \n     venue, \n     newChatMember, \n     leftChatMember, \n     newChatTitle, \n     newChatPhoto, \n     deleteChatPhoto, \n     groupChatCreated, \n     supergroupChatCreated, \n     channelChatCreated, \n     migrateToChatId, \n     migrateFromChatId, \n     pinnedMessage\n   ) {\n       this._messageId = messageId\n       this._from = from\n       this._date = date\n       this._chat = chat\n       this._forwardFrom = forwardFrom\n       this._forwardFromChat = forwardFromChat\n       this._forwardFromMessageId = forwardFromMessageId\n       this._forwardDate = forwardDate\n       this._replyToMessage = replyToMessage\n       this._editDate = editDate\n       this._text = text\n       this._entities = entities\n       this._audio = audio\n       this._document = document\n       this._game = game\n       this._photo = photo\n       this._sticker = sticker\n       this._video = video\n       this._voice = voice\n       this._caption = caption\n       this._contact = contact\n       this._location = location\n       this._venue = venue\n       this._newChatMember = newChatMember\n       this._leftChatMember = leftChatMember\n       this._newChatTitle = newChatTitle\n       this._newChatPhoto = newChatPhoto\n       this._deleteChatPhoto = deleteChatPhoto\n       this._groupChatCreated = groupChatCreated\n       this._supergroupChatCreated = supergroupChatCreated\n       this._channelChatCreated = channelChatCreated\n       this._migrateToChatId = migrateToChatId\n       this._migrateFromChatId = migrateFromChatId\n       this._pinnedMessage = pinnedMessage\n   }\n\n   /**\n    * Unique message identifier inside this chat\n    * @returns {number}\n   */\n   get messageId() {\n       return this._messageId\n   }\n\n   /**\n    * Sender, can be empty for messages sent to channels\n    * @returns {User|null}\n   */\n   get from() {\n       return this._from\n   }\n\n   /**\n    * Date the message was sent in Unix time\n    * @returns {number}\n   */\n   get date() {\n       return this._date\n   }\n\n   /**\n    * Conversation the message belongs to\n    * @returns {Chat}\n   */\n   get chat() {\n       return this._chat\n   }\n\n   /**\n    * For forwarded messages, sender of the original message\n    * @returns {User|null}\n   */\n   get forwardFrom() {\n       return this._forwardFrom\n   }\n\n   /**\n    * For messages forwarded from a channel, information about the original channel\n    * @returns {Chat|null}\n   */\n   get forwardFromChat() {\n       return this._forwardFromChat\n   }\n\n   /**\n    * For forwarded channel posts, identifier of the original message in the channel\n    * @returns {number|null}\n   */\n   get forwardFromMessageId() {\n       return this._forwardFromMessageId\n   }\n\n   /**\n    * For forwarded messages, date the original message was sent in Unix time\n    * @returns {number|null}\n   */\n   get forwardDate() {\n       return this._forwardDate\n   }\n\n   /**\n    * For replies, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.\n    * @returns {Message|null}\n   */\n   get replyToMessage() {\n       return this._replyToMessage\n   }\n\n   /**\n    * Date the message was last edited in Unix time\n    * @returns {number|null}\n   */\n   get editDate() {\n       return this._editDate\n   }\n\n   /**\n    * For text messages, the actual UTF-8 text of the message, 0-4096 characters.\n    * @returns {string|null}\n   */\n   get text() {\n       return this._text\n   }\n\n   /**\n    * For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text\n    * @returns {MessageEntity[]|null}\n   */\n   get entities() {\n       return this._entities\n   }\n\n   /**\n    * Message is an audio file, information about the file\n    * @returns {Audio|null}\n   */\n   get audio() {\n       return this._audio\n   }\n\n   /**\n    * Message is a general file, information about the file\n    * @returns {Document|null}\n   */\n   get document() {\n       return this._document\n   }\n\n   /**\n    * Message is a game, information about the game. More about games »\n    * @returns {Game|null}\n   */\n   get game() {\n       return this._game\n   }\n\n   /**\n    * Message is a photo, available sizes of the photo\n    * @returns {PhotoSize[]|null}\n   */\n   get photo() {\n       return this._photo\n   }\n\n   /**\n    * Message is a sticker, information about the sticker\n    * @returns {Sticker|null}\n   */\n   get sticker() {\n       return this._sticker\n   }\n\n   /**\n    * Message is a video, information about the video\n    * @returns {Video|null}\n   */\n   get video() {\n       return this._video\n   }\n\n   /**\n    * Message is a voice message, information about the file\n    * @returns {Voice|null}\n   */\n   get voice() {\n       return this._voice\n   }\n\n   /**\n    * Caption for the document, photo or video, 0-200 characters\n    * @returns {string|null}\n   */\n   get caption() {\n       return this._caption\n   }\n\n   /**\n    * Message is a shared contact, information about the contact\n    * @returns {Contact|null}\n   */\n   get contact() {\n       return this._contact\n   }\n\n   /**\n    * Message is a shared location, information about the location\n    * @returns {Location|null}\n   */\n   get location() {\n       return this._location\n   }\n\n   /**\n    * Message is a venue, information about the venue\n    * @returns {Venue|null}\n   */\n   get venue() {\n       return this._venue\n   }\n\n   /**\n    * A new member was added to the group, information about them (this member may be the bot itself)\n    * @returns {User|null}\n   */\n   get newChatMember() {\n       return this._newChatMember\n   }\n\n   /**\n    * A member was removed from the group, information about them (this member may be the bot itself)\n    * @returns {User|null}\n   */\n   get leftChatMember() {\n       return this._leftChatMember\n   }\n\n   /**\n    * A chat title was changed to this value\n    * @returns {string|null}\n   */\n   get newChatTitle() {\n       return this._newChatTitle\n   }\n\n   /**\n    * A chat photo was change to this value\n    * @returns {PhotoSize[]|null}\n   */\n   get newChatPhoto() {\n       return this._newChatPhoto\n   }\n\n   /**\n    * Service message: the chat photo was deleted\n    * @returns {boolean|null}\n   */\n   get deleteChatPhoto() {\n       return this._deleteChatPhoto\n   }\n\n   /**\n    * Service message: the group has been created\n    * @returns {boolean|null}\n   */\n   get groupChatCreated() {\n       return this._groupChatCreated\n   }\n\n   /**\n    * Service message: the supergroup has been created. This field can‘t be received in a message coming through updates, because bot can’t be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup.\n    * @returns {boolean|null}\n   */\n   get supergroupChatCreated() {\n       return this._supergroupChatCreated\n   }\n\n   /**\n    * Service message: the channel has been created. This field can‘t be received in a message coming through updates, because bot can’t be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel.\n    * @returns {boolean|null}\n   */\n   get channelChatCreated() {\n       return this._channelChatCreated\n   }\n\n   /**\n    * The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.\n    * @returns {number|null}\n   */\n   get migrateToChatId() {\n       return this._migrateToChatId\n   }\n\n   /**\n    * The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.\n    * @returns {number|null}\n   */\n   get migrateFromChatId() {\n       return this._migrateFromChatId\n   }\n\n   /**\n    * Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it is itself a reply.\n    * @returns {Message|null}\n   */\n   get pinnedMessage() {\n       return this._pinnedMessage\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {Message}\n    */\n   static deserialize(raw) {\n      return new Message(\n          raw['message_id'], \n          raw['from'] ? User.deserialize(raw['from']) : null, \n          raw['date'], \n          raw['chat'] ? Chat.deserialize(raw['chat']) : null, \n          raw['forward_from'] ? User.deserialize(raw['forward_from']) : null, \n          raw['forward_from_chat'] ? Chat.deserialize(raw['forward_from_chat']) : null, \n          raw['forward_from_message_id'] ? raw['forward_from_message_id'] : null, \n          raw['forward_date'] ? raw['forward_date'] : null, \n          raw['reply_to_message'] ? Message.deserialize(raw['reply_to_message']) : null, \n          raw['edit_date'] ? raw['edit_date'] : null, \n          raw['text'] ? raw['text'] : null, \n          raw['entities'] ? raw['entities'].map(item => MessageEntity.deserialize(item)) : null, \n          raw['audio'] ? Audio.deserialize(raw['audio']) : null, \n          raw['document'] ? Document.deserialize(raw['document']) : null, \n          raw['game'] ? Game.deserialize(raw['game']) : null, \n          raw['photo'] ? raw['photo'].map(item => PhotoSize.deserialize(item)) : null, \n          raw['sticker'] ? Sticker.deserialize(raw['sticker']) : null, \n          raw['video'] ? Video.deserialize(raw['video']) : null, \n          raw['voice'] ? Voice.deserialize(raw['voice']) : null, \n          raw['caption'] ? raw['caption'] : null, \n          raw['contact'] ? Contact.deserialize(raw['contact']) : null, \n          raw['location'] ? Location.deserialize(raw['location']) : null, \n          raw['venue'] ? Venue.deserialize(raw['venue']) : null, \n          raw['new_chat_member'] ? User.deserialize(raw['new_chat_member']) : null, \n          raw['left_chat_member'] ? User.deserialize(raw['left_chat_member']) : null, \n          raw['new_chat_title'] ? raw['new_chat_title'] : null, \n          raw['new_chat_photo'] ? raw['new_chat_photo'].map(item => PhotoSize.deserialize(item)) : null, \n          raw['delete_chat_photo'] ? raw['delete_chat_photo'] : null, \n          raw['group_chat_created'] ? raw['group_chat_created'] : null, \n          raw['supergroup_chat_created'] ? raw['supergroup_chat_created'] : null, \n          raw['channel_chat_created'] ? raw['channel_chat_created'] : null, \n          raw['migrate_to_chat_id'] ? raw['migrate_to_chat_id'] : null, \n          raw['migrate_from_chat_id'] ? raw['migrate_from_chat_id'] : null, \n          raw['pinned_message'] ? Message.deserialize(raw['pinned_message']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          message_id: this.messageId ? this.messageId : undefined, \n          from: this.from ? this.from.serialize() : undefined, \n          date: this.date ? this.date : undefined, \n          chat: this.chat ? this.chat.serialize() : undefined, \n          forward_from: this.forwardFrom ? this.forwardFrom.serialize() : undefined, \n          forward_from_chat: this.forwardFromChat ? this.forwardFromChat.serialize() : undefined, \n          forward_from_message_id: this.forwardFromMessageId ? this.forwardFromMessageId : undefined, \n          forward_date: this.forwardDate ? this.forwardDate : undefined, \n          reply_to_message: this.replyToMessage ? this.replyToMessage.serialize() : undefined, \n          edit_date: this.editDate ? this.editDate : undefined, \n          text: this.text ? this.text : undefined, \n          entities: this.entities ? this.entities.map(item => item.serialize()) : undefined, \n          audio: this.audio ? this.audio.serialize() : undefined, \n          document: this.document ? this.document.serialize() : undefined, \n          game: this.game ? this.game.serialize() : undefined, \n          photo: this.photo ? this.photo.map(item => item.serialize()) : undefined, \n          sticker: this.sticker ? this.sticker.serialize() : undefined, \n          video: this.video ? this.video.serialize() : undefined, \n          voice: this.voice ? this.voice.serialize() : undefined, \n          caption: this.caption ? this.caption : undefined, \n          contact: this.contact ? this.contact.serialize() : undefined, \n          location: this.location ? this.location.serialize() : undefined, \n          venue: this.venue ? this.venue.serialize() : undefined, \n          new_chat_member: this.newChatMember ? this.newChatMember.serialize() : undefined, \n          left_chat_member: this.leftChatMember ? this.leftChatMember.serialize() : undefined, \n          new_chat_title: this.newChatTitle ? this.newChatTitle : undefined, \n          new_chat_photo: this.newChatPhoto ? this.newChatPhoto.map(item => item.serialize()) : undefined, \n          delete_chat_photo: this.deleteChatPhoto ? this.deleteChatPhoto : undefined, \n          group_chat_created: this.groupChatCreated ? this.groupChatCreated : undefined, \n          supergroup_chat_created: this.supergroupChatCreated ? this.supergroupChatCreated : undefined, \n          channel_chat_created: this.channelChatCreated ? this.channelChatCreated : undefined, \n          migrate_to_chat_id: this.migrateToChatId ? this.migrateToChatId : undefined, \n          migrate_from_chat_id: this.migrateFromChatId ? this.migrateFromChatId : undefined, \n          pinned_message: this.pinnedMessage ? this.pinnedMessage.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = Message","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/User.js":"'use strict'\n\n/**\n * This object represents a Telegram user or bot.\n */\n\nclass User {\n   /**\n    *\n    * @param {number} id\n    * @param {string} firstName\n    * @param {string|null} [lastName]\n    * @param {string|null} [username]\n   */\n   constructor(id, firstName, lastName, username) {\n       this._id = id\n       this._firstName = firstName\n       this._lastName = lastName\n       this._username = username\n   }\n\n   /**\n    * Unique identifier for this user or bot\n    * @returns {number}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * User‘s or bot’s first name\n    * @returns {string}\n   */\n   get firstName() {\n       return this._firstName\n   }\n\n   /**\n    * User‘s or bot’s last name\n    * @returns {string|null}\n   */\n   get lastName() {\n       return this._lastName\n   }\n\n   /**\n    * User‘s or bot’s username\n    * @returns {string|null}\n   */\n   get username() {\n       return this._username\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {User}\n    */\n   static deserialize(raw) {\n      return new User(raw['id'], raw['first_name'], raw['last_name'] ? raw['last_name'] : null, raw['username'] ? raw['username'] : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          id: this.id ? this.id : undefined, \n          first_name: this.firstName ? this.firstName : undefined, \n          last_name: this.lastName ? this.lastName : undefined, \n          username: this.username ? this.username : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = User","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/Chat.js":"'use strict'\n\n/**\n * This object represents a chat.\n */\n\nclass Chat {\n   /**\n    *\n    * @param {number} id\n    * @param {string} type\n    * @param {string|null} [title]\n    * @param {string|null} [username]\n    * @param {string|null} [firstName]\n    * @param {string|null} [lastName]\n    * @param {boolean|null} [allMembersAreAdministrators]\n   */\n   constructor(\n     id, \n     type, \n     title, \n     username, \n     firstName, \n     lastName, \n     allMembersAreAdministrators\n   ) {\n       this._id = id\n       this._type = type\n       this._title = title\n       this._username = username\n       this._firstName = firstName\n       this._lastName = lastName\n       this._allMembersAreAdministrators = allMembersAreAdministrators\n   }\n\n   /**\n    * Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.\n    * @returns {number}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * Type of chat, can be either “private”, “group”, “supergroup” or “channel”\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Title, for supergroups, channels and group chats\n    * @returns {string|null}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Username, for private chats, supergroups and channels if available\n    * @returns {string|null}\n   */\n   get username() {\n       return this._username\n   }\n\n   /**\n    * First name of the other party in a private chat\n    * @returns {string|null}\n   */\n   get firstName() {\n       return this._firstName\n   }\n\n   /**\n    * Last name of the other party in a private chat\n    * @returns {string|null}\n   */\n   get lastName() {\n       return this._lastName\n   }\n\n   /**\n    * True if a group has ‘All Members Are Admins’ enabled.\n    * @returns {boolean|null}\n   */\n   get allMembersAreAdministrators() {\n       return this._allMembersAreAdministrators\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {Chat}\n    */\n   static deserialize(raw) {\n      return new Chat(\n          raw['id'], \n          raw['type'], \n          raw['title'] ? raw['title'] : null, \n          raw['username'] ? raw['username'] : null, \n          raw['first_name'] ? raw['first_name'] : null, \n          raw['last_name'] ? raw['last_name'] : null, \n          raw['all_members_are_administrators'] ? raw['all_members_are_administrators'] : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          id: this.id ? this.id : undefined, \n          type: this.type ? this.type : undefined, \n          title: this.title ? this.title : undefined, \n          username: this.username ? this.username : undefined, \n          first_name: this.firstName ? this.firstName : undefined, \n          last_name: this.lastName ? this.lastName : undefined, \n          all_members_are_administrators: this.allMembersAreAdministrators ? this.allMembersAreAdministrators : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = Chat","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/MessageEntity.js":"'use strict'\n\nconst User = require('./User')\n\n/**\n * This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc. \n */\n\nclass MessageEntity {\n   /**\n    *\n    * @param {string} type\n    * @param {number} offset\n    * @param {number} length\n    * @param {string|null} [url]\n    * @param {User|null} [user]\n   */\n   constructor(type, offset, length, url, user) {\n       this._type = type\n       this._offset = offset\n       this._length = length\n       this._url = url\n       this._user = user\n   }\n\n   /**\n    * Type of the entity. Can be mention (@username), hashtag, bot_command, url, email, bold (bold text), italic (italic text), code (monowidth string), pre (monowidth block), text_link (for clickable text URLs), text_mention (for users without usernames)\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Offset in UTF-16 code units to the start of the entity\n    * @returns {number}\n   */\n   get offset() {\n       return this._offset\n   }\n\n   /**\n    * Length of the entity in UTF-16 code units\n    * @returns {number}\n   */\n   get length() {\n       return this._length\n   }\n\n   /**\n    * For “text_link” only, url that will be opened after user taps on the text\n    * @returns {string|null}\n   */\n   get url() {\n       return this._url\n   }\n\n   /**\n    * For “text_mention” only, the mentioned user\n    * @returns {User|null}\n   */\n   get user() {\n       return this._user\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {MessageEntity}\n    */\n   static deserialize(raw) {\n      return new MessageEntity(\n          raw['type'], \n          raw['offset'], \n          raw['length'], \n          raw['url'] ? raw['url'] : null, \n          raw['user'] ? User.deserialize(raw['user']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          offset: this.offset ? this.offset : undefined, \n          length: this.length ? this.length : undefined, \n          url: this.url ? this.url : undefined, \n          user: this.user ? this.user.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = MessageEntity","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/Audio.js":"'use strict'\n\n/**\n * This object represents an audio file to be treated as music by the Telegram clients.\n */\n\nclass Audio {\n   /**\n    *\n    * @param {string} fileId\n    * @param {number} duration\n    * @param {string|null} [performer]\n    * @param {string|null} [title]\n    * @param {string|null} [mimeType]\n    * @param {number|null} [fileSize]\n   */\n   constructor(fileId, duration, performer, title, mimeType, fileSize) {\n       this._fileId = fileId\n       this._duration = duration\n       this._performer = performer\n       this._title = title\n       this._mimeType = mimeType\n       this._fileSize = fileSize\n   }\n\n   /**\n    * Unique identifier for this file\n    * @returns {string}\n   */\n   get fileId() {\n       return this._fileId\n   }\n\n   /**\n    * Duration of the audio in seconds as defined by sender\n    * @returns {number}\n   */\n   get duration() {\n       return this._duration\n   }\n\n   /**\n    * Performer of the audio as defined by sender or by audio tags\n    * @returns {string|null}\n   */\n   get performer() {\n       return this._performer\n   }\n\n   /**\n    * Title of the audio as defined by sender or by audio tags\n    * @returns {string|null}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * MIME type of the file as defined by sender\n    * @returns {string|null}\n   */\n   get mimeType() {\n       return this._mimeType\n   }\n\n   /**\n    * File size\n    * @returns {number|null}\n   */\n   get fileSize() {\n       return this._fileSize\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {Audio}\n    */\n   static deserialize(raw) {\n      return new Audio(\n          raw['file_id'], \n          raw['duration'], \n          raw['performer'] ? raw['performer'] : null, \n          raw['title'] ? raw['title'] : null, \n          raw['mime_type'] ? raw['mime_type'] : null, \n          raw['file_size'] ? raw['file_size'] : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          file_id: this.fileId ? this.fileId : undefined, \n          duration: this.duration ? this.duration : undefined, \n          performer: this.performer ? this.performer : undefined, \n          title: this.title ? this.title : undefined, \n          mime_type: this.mimeType ? this.mimeType : undefined, \n          file_size: this.fileSize ? this.fileSize : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = Audio","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/Document.js":"'use strict'\n\nconst PhotoSize = require('./PhotoSize')\n\n/**\n * This object represents a general file (as opposed to photos, voice messages and audio files).\n */\n\nclass Document {\n   /**\n    *\n    * @param {string} fileId\n    * @param {PhotoSize|null} [thumb]\n    * @param {string|null} [fileName]\n    * @param {string|null} [mimeType]\n    * @param {number|null} [fileSize]\n   */\n   constructor(fileId, thumb, fileName, mimeType, fileSize) {\n       this._fileId = fileId\n       this._thumb = thumb\n       this._fileName = fileName\n       this._mimeType = mimeType\n       this._fileSize = fileSize\n   }\n\n   /**\n    * Unique file identifier\n    * @returns {string}\n   */\n   get fileId() {\n       return this._fileId\n   }\n\n   /**\n    * Document thumbnail as defined by sender\n    * @returns {PhotoSize|null}\n   */\n   get thumb() {\n       return this._thumb\n   }\n\n   /**\n    * Original filename as defined by sender\n    * @returns {string|null}\n   */\n   get fileName() {\n       return this._fileName\n   }\n\n   /**\n    * MIME type of the file as defined by sender\n    * @returns {string|null}\n   */\n   get mimeType() {\n       return this._mimeType\n   }\n\n   /**\n    * File size\n    * @returns {number|null}\n   */\n   get fileSize() {\n       return this._fileSize\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {Document}\n    */\n   static deserialize(raw) {\n      return new Document(\n          raw['file_id'], \n          raw['thumb'] ? PhotoSize.deserialize(raw['thumb']) : null, \n          raw['file_name'] ? raw['file_name'] : null, \n          raw['mime_type'] ? raw['mime_type'] : null, \n          raw['file_size'] ? raw['file_size'] : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          file_id: this.fileId ? this.fileId : undefined, \n          thumb: this.thumb ? this.thumb.serialize() : undefined, \n          file_name: this.fileName ? this.fileName : undefined, \n          mime_type: this.mimeType ? this.mimeType : undefined, \n          file_size: this.fileSize ? this.fileSize : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = Document","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/PhotoSize.js":"'use strict'\n\n/**\n * This object represents one size of a photo or a file / sticker thumbnail.\n */\n\nclass PhotoSize {\n   /**\n    *\n    * @param {string} fileId\n    * @param {number} width\n    * @param {number} height\n    * @param {number|null} [fileSize]\n   */\n   constructor(fileId, width, height, fileSize) {\n       this._fileId = fileId\n       this._width = width\n       this._height = height\n       this._fileSize = fileSize\n   }\n\n   /**\n    * Unique identifier for this file\n    * @returns {string}\n   */\n   get fileId() {\n       return this._fileId\n   }\n\n   /**\n    * Photo width\n    * @returns {number}\n   */\n   get width() {\n       return this._width\n   }\n\n   /**\n    * Photo height\n    * @returns {number}\n   */\n   get height() {\n       return this._height\n   }\n\n   /**\n    * File size\n    * @returns {number|null}\n   */\n   get fileSize() {\n       return this._fileSize\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {PhotoSize}\n    */\n   static deserialize(raw) {\n      return new PhotoSize(raw['file_id'], raw['width'], raw['height'], raw['file_size'] ? raw['file_size'] : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          file_id: this.fileId ? this.fileId : undefined, \n          width: this.width ? this.width : undefined, \n          height: this.height ? this.height : undefined, \n          file_size: this.fileSize ? this.fileSize : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = PhotoSize","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/Game.js":"'use strict'\n\nconst PhotoSize = require('./PhotoSize')\nconst MessageEntity = require('./MessageEntity')\nconst Animation = require('./Animation')\n\n/**\n * This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.\n */\n\nclass Game {\n   /**\n    *\n    * @param {string} title\n    * @param {string} description\n    * @param {PhotoSize[]} photo\n    * @param {string|null} [text]\n    * @param {MessageEntity[]|null} [textEntities]\n    * @param {Animation|null} [animation]\n   */\n   constructor(title, description, photo, text, textEntities, animation) {\n       this._title = title\n       this._description = description\n       this._photo = photo\n       this._text = text\n       this._textEntities = textEntities\n       this._animation = animation\n   }\n\n   /**\n    * Title of the game\n    * @returns {string}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Description of the game\n    * @returns {string}\n   */\n   get description() {\n       return this._description\n   }\n\n   /**\n    * Photo that will be displayed in the game message in chats.\n    * @returns {PhotoSize[]}\n   */\n   get photo() {\n       return this._photo\n   }\n\n   /**\n    * Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters.\n    * @returns {string|null}\n   */\n   get text() {\n       return this._text\n   }\n\n   /**\n    * Special entities that appear in text, such as usernames, URLs, bot commands, etc.\n    * @returns {MessageEntity[]|null}\n   */\n   get textEntities() {\n       return this._textEntities\n   }\n\n   /**\n    * Animation that will be displayed in the game message in chats. Upload via BotFather\n    * @returns {Animation|null}\n   */\n   get animation() {\n       return this._animation\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {Game}\n    */\n   static deserialize(raw) {\n      return new Game(\n          raw['title'], \n          raw['description'], \n          raw['photo'] ? raw['photo'].map(item => PhotoSize.deserialize(item)) : null, \n          raw['text'] ? raw['text'] : null, \n          raw['text_entities'] ? raw['text_entities'].map(item => MessageEntity.deserialize(item)) : null, \n          raw['animation'] ? Animation.deserialize(raw['animation']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          title: this.title ? this.title : undefined, \n          description: this.description ? this.description : undefined, \n          photo: this.photo ? this.photo.map(item => item.serialize()) : undefined, \n          text: this.text ? this.text : undefined, \n          text_entities: this.textEntities ? this.textEntities.map(item => item.serialize()) : undefined, \n          animation: this.animation ? this.animation.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = Game","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/Animation.js":"'use strict'\n\nconst PhotoSize = require('./PhotoSize')\n\n/**\n * You can provide an animation for your game so that it looks stylish in chats (check out Lumberjack for an example). This object represents an animation file to be displayed in the message containing a game.\n */\n\nclass Animation {\n   /**\n    *\n    * @param {string} fileId\n    * @param {PhotoSize|null} [thumb]\n    * @param {string|null} [fileName]\n    * @param {string|null} [mimeType]\n    * @param {number|null} [fileSize]\n   */\n   constructor(fileId, thumb, fileName, mimeType, fileSize) {\n       this._fileId = fileId\n       this._thumb = thumb\n       this._fileName = fileName\n       this._mimeType = mimeType\n       this._fileSize = fileSize\n   }\n\n   /**\n    * Unique file identifier\n    * @returns {string}\n   */\n   get fileId() {\n       return this._fileId\n   }\n\n   /**\n    * Animation thumbnail as defined by sender\n    * @returns {PhotoSize|null}\n   */\n   get thumb() {\n       return this._thumb\n   }\n\n   /**\n    * Original animation filename as defined by sender\n    * @returns {string|null}\n   */\n   get fileName() {\n       return this._fileName\n   }\n\n   /**\n    * MIME type of the file as defined by sender\n    * @returns {string|null}\n   */\n   get mimeType() {\n       return this._mimeType\n   }\n\n   /**\n    * File size\n    * @returns {number|null}\n   */\n   get fileSize() {\n       return this._fileSize\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {Animation}\n    */\n   static deserialize(raw) {\n      return new Animation(\n          raw['file_id'], \n          raw['thumb'] ? PhotoSize.deserialize(raw['thumb']) : null, \n          raw['file_name'] ? raw['file_name'] : null, \n          raw['mime_type'] ? raw['mime_type'] : null, \n          raw['file_size'] ? raw['file_size'] : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          file_id: this.fileId ? this.fileId : undefined, \n          thumb: this.thumb ? this.thumb.serialize() : undefined, \n          file_name: this.fileName ? this.fileName : undefined, \n          mime_type: this.mimeType ? this.mimeType : undefined, \n          file_size: this.fileSize ? this.fileSize : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = Animation","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/Sticker.js":"'use strict'\n\nconst PhotoSize = require('./PhotoSize')\n\n/**\n * This object represents a sticker.\n */\n\nclass Sticker {\n   /**\n    *\n    * @param {string} fileId\n    * @param {number} width\n    * @param {number} height\n    * @param {PhotoSize|null} [thumb]\n    * @param {string|null} [emoji]\n    * @param {number|null} [fileSize]\n   */\n   constructor(fileId, width, height, thumb, emoji, fileSize) {\n       this._fileId = fileId\n       this._width = width\n       this._height = height\n       this._thumb = thumb\n       this._emoji = emoji\n       this._fileSize = fileSize\n   }\n\n   /**\n    * Unique identifier for this file\n    * @returns {string}\n   */\n   get fileId() {\n       return this._fileId\n   }\n\n   /**\n    * Sticker width\n    * @returns {number}\n   */\n   get width() {\n       return this._width\n   }\n\n   /**\n    * Sticker height\n    * @returns {number}\n   */\n   get height() {\n       return this._height\n   }\n\n   /**\n    * Sticker thumbnail in .webp or .jpg format\n    * @returns {PhotoSize|null}\n   */\n   get thumb() {\n       return this._thumb\n   }\n\n   /**\n    * Emoji associated with the sticker\n    * @returns {string|null}\n   */\n   get emoji() {\n       return this._emoji\n   }\n\n   /**\n    * File size\n    * @returns {number|null}\n   */\n   get fileSize() {\n       return this._fileSize\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {Sticker}\n    */\n   static deserialize(raw) {\n      return new Sticker(\n          raw['file_id'], \n          raw['width'], \n          raw['height'], \n          raw['thumb'] ? PhotoSize.deserialize(raw['thumb']) : null, \n          raw['emoji'] ? raw['emoji'] : null, \n          raw['file_size'] ? raw['file_size'] : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          file_id: this.fileId ? this.fileId : undefined, \n          width: this.width ? this.width : undefined, \n          height: this.height ? this.height : undefined, \n          thumb: this.thumb ? this.thumb.serialize() : undefined, \n          emoji: this.emoji ? this.emoji : undefined, \n          file_size: this.fileSize ? this.fileSize : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = Sticker","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/Video.js":"'use strict'\n\nconst PhotoSize = require('./PhotoSize')\n\n/**\n * This object represents a video file.\n */\n\nclass Video {\n   /**\n    *\n    * @param {string} fileId\n    * @param {number} width\n    * @param {number} height\n    * @param {number} duration\n    * @param {PhotoSize|null} [thumb]\n    * @param {string|null} [mimeType]\n    * @param {number|null} [fileSize]\n   */\n   constructor(\n     fileId, \n     width, \n     height, \n     duration, \n     thumb, \n     mimeType, \n     fileSize\n   ) {\n       this._fileId = fileId\n       this._width = width\n       this._height = height\n       this._duration = duration\n       this._thumb = thumb\n       this._mimeType = mimeType\n       this._fileSize = fileSize\n   }\n\n   /**\n    * Unique identifier for this file\n    * @returns {string}\n   */\n   get fileId() {\n       return this._fileId\n   }\n\n   /**\n    * Video width as defined by sender\n    * @returns {number}\n   */\n   get width() {\n       return this._width\n   }\n\n   /**\n    * Video height as defined by sender\n    * @returns {number}\n   */\n   get height() {\n       return this._height\n   }\n\n   /**\n    * Duration of the video in seconds as defined by sender\n    * @returns {number}\n   */\n   get duration() {\n       return this._duration\n   }\n\n   /**\n    * Video thumbnail\n    * @returns {PhotoSize|null}\n   */\n   get thumb() {\n       return this._thumb\n   }\n\n   /**\n    * Mime type of a file as defined by sender\n    * @returns {string|null}\n   */\n   get mimeType() {\n       return this._mimeType\n   }\n\n   /**\n    * File size\n    * @returns {number|null}\n   */\n   get fileSize() {\n       return this._fileSize\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {Video}\n    */\n   static deserialize(raw) {\n      return new Video(\n          raw['file_id'], \n          raw['width'], \n          raw['height'], \n          raw['duration'], \n          raw['thumb'] ? PhotoSize.deserialize(raw['thumb']) : null, \n          raw['mime_type'] ? raw['mime_type'] : null, \n          raw['file_size'] ? raw['file_size'] : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          file_id: this.fileId ? this.fileId : undefined, \n          width: this.width ? this.width : undefined, \n          height: this.height ? this.height : undefined, \n          duration: this.duration ? this.duration : undefined, \n          thumb: this.thumb ? this.thumb.serialize() : undefined, \n          mime_type: this.mimeType ? this.mimeType : undefined, \n          file_size: this.fileSize ? this.fileSize : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = Video","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/Voice.js":"'use strict'\n\n/**\n * This object represents a voice note.\n */\n\nclass Voice {\n   /**\n    *\n    * @param {string} fileId\n    * @param {number} duration\n    * @param {string|null} [mimeType]\n    * @param {number|null} [fileSize]\n   */\n   constructor(fileId, duration, mimeType, fileSize) {\n       this._fileId = fileId\n       this._duration = duration\n       this._mimeType = mimeType\n       this._fileSize = fileSize\n   }\n\n   /**\n    * Unique identifier for this file\n    * @returns {string}\n   */\n   get fileId() {\n       return this._fileId\n   }\n\n   /**\n    * Duration of the audio in seconds as defined by sender\n    * @returns {number}\n   */\n   get duration() {\n       return this._duration\n   }\n\n   /**\n    * MIME type of the file as defined by sender\n    * @returns {string|null}\n   */\n   get mimeType() {\n       return this._mimeType\n   }\n\n   /**\n    * File size\n    * @returns {number|null}\n   */\n   get fileSize() {\n       return this._fileSize\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {Voice}\n    */\n   static deserialize(raw) {\n      return new Voice(raw['file_id'], raw['duration'], raw['mime_type'] ? raw['mime_type'] : null, raw['file_size'] ? raw['file_size'] : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          file_id: this.fileId ? this.fileId : undefined, \n          duration: this.duration ? this.duration : undefined, \n          mime_type: this.mimeType ? this.mimeType : undefined, \n          file_size: this.fileSize ? this.fileSize : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = Voice","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/Contact.js":"'use strict'\n\n/**\n * This object represents a phone contact.\n */\n\nclass Contact {\n   /**\n    *\n    * @param {string} phoneNumber\n    * @param {string} firstName\n    * @param {string|null} [lastName]\n    * @param {number|null} [userId]\n   */\n   constructor(phoneNumber, firstName, lastName, userId) {\n       this._phoneNumber = phoneNumber\n       this._firstName = firstName\n       this._lastName = lastName\n       this._userId = userId\n   }\n\n   /**\n    * Contact's phone number\n    * @returns {string}\n   */\n   get phoneNumber() {\n       return this._phoneNumber\n   }\n\n   /**\n    * Contact's first name\n    * @returns {string}\n   */\n   get firstName() {\n       return this._firstName\n   }\n\n   /**\n    * Contact's last name\n    * @returns {string|null}\n   */\n   get lastName() {\n       return this._lastName\n   }\n\n   /**\n    * Contact's user identifier in Telegram\n    * @returns {number|null}\n   */\n   get userId() {\n       return this._userId\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {Contact}\n    */\n   static deserialize(raw) {\n      return new Contact(raw['phone_number'], raw['first_name'], raw['last_name'] ? raw['last_name'] : null, raw['user_id'] ? raw['user_id'] : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          phone_number: this.phoneNumber ? this.phoneNumber : undefined, \n          first_name: this.firstName ? this.firstName : undefined, \n          last_name: this.lastName ? this.lastName : undefined, \n          user_id: this.userId ? this.userId : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = Contact","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/Location.js":"'use strict'\n\n/**\n * This object represents a point on the map.\n */\n\nclass Location {\n   /**\n    *\n    * @param {number} longitude\n    * @param {number} latitude\n   */\n   constructor(longitude, latitude) {\n       this._longitude = longitude\n       this._latitude = latitude\n   }\n\n   /**\n    * Longitude as defined by sender\n    * @returns {number}\n   */\n   get longitude() {\n       return this._longitude\n   }\n\n   /**\n    * Latitude as defined by sender\n    * @returns {number}\n   */\n   get latitude() {\n       return this._latitude\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {Location}\n    */\n   static deserialize(raw) {\n      return new Location(raw['longitude'], raw['latitude'])\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          longitude: this.longitude ? this.longitude : undefined, \n          latitude: this.latitude ? this.latitude : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = Location","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/Venue.js":"'use strict'\n\nconst Location = require('./Location')\n\n/**\n * This object represents a venue.\n */\n\nclass Venue {\n   /**\n    *\n    * @param {Location} location\n    * @param {string} title\n    * @param {string} address\n    * @param {string|null} [foursquareId]\n   */\n   constructor(location, title, address, foursquareId) {\n       this._location = location\n       this._title = title\n       this._address = address\n       this._foursquareId = foursquareId\n   }\n\n   /**\n    * Venue location\n    * @returns {Location}\n   */\n   get location() {\n       return this._location\n   }\n\n   /**\n    * Name of the venue\n    * @returns {string}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Address of the venue\n    * @returns {string}\n   */\n   get address() {\n       return this._address\n   }\n\n   /**\n    * Foursquare identifier of the venue\n    * @returns {string|null}\n   */\n   get foursquareId() {\n       return this._foursquareId\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {Venue}\n    */\n   static deserialize(raw) {\n      return new Venue(raw['location'] ? Location.deserialize(raw['location']) : null, raw['title'], raw['address'], raw['foursquare_id'] ? raw['foursquare_id'] : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          location: this.location ? this.location.serialize() : undefined, \n          title: this.title ? this.title : undefined, \n          address: this.address ? this.address : undefined, \n          foursquare_id: this.foursquareId ? this.foursquareId : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = Venue","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQuery.js":"'use strict'\n\nconst User = require('./User')\nconst Location = require('./Location')\n\n/**\n * This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.\n */\n\nclass InlineQuery {\n   /**\n    *\n    * @param {string} id\n    * @param {User} from\n    * @param {Location|null} [location]\n    * @param {string} query\n    * @param {string} offset\n   */\n   constructor(id, from, location, query, offset) {\n       this._id = id\n       this._from = from\n       this._location = location\n       this._query = query\n       this._offset = offset\n   }\n\n   /**\n    * Unique identifier for this query\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * Sender\n    * @returns {User}\n   */\n   get from() {\n       return this._from\n   }\n\n   /**\n    * Sender location, only for bots that request user location\n    * @returns {Location|null}\n   */\n   get location() {\n       return this._location\n   }\n\n   /**\n    * Text of the query (up to 512 characters)\n    * @returns {string}\n   */\n   get query() {\n       return this._query\n   }\n\n   /**\n    * Offset of the results to be returned, can be controlled by the bot\n    * @returns {string}\n   */\n   get offset() {\n       return this._offset\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQuery}\n    */\n   static deserialize(raw) {\n      return new InlineQuery(\n          raw['id'], \n          raw['from'] ? User.deserialize(raw['from']) : null, \n          raw['location'] ? Location.deserialize(raw['location']) : null, \n          raw['query'], \n          raw['offset']\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          id: this.id ? this.id : undefined, \n          from: this.from ? this.from.serialize() : undefined, \n          location: this.location ? this.location.serialize() : undefined, \n          query: this.query ? this.query : undefined, \n          offset: this.offset ? this.offset : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQuery","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/ChosenInlineResult.js":"'use strict'\n\nconst User = require('./User')\nconst Location = require('./Location')\n\n/**\n * Represents a result of an inline query that was chosen by the user and sent to their chat partner. \n */\n\nclass ChosenInlineResult {\n   /**\n    *\n    * @param {string} resultId\n    * @param {User} from\n    * @param {Location|null} [location]\n    * @param {string|null} [inlineMessageId]\n    * @param {string} query\n   */\n   constructor(resultId, from, location, inlineMessageId, query) {\n       this._resultId = resultId\n       this._from = from\n       this._location = location\n       this._inlineMessageId = inlineMessageId\n       this._query = query\n   }\n\n   /**\n    * The unique identifier for the result that was chosen\n    * @returns {string}\n   */\n   get resultId() {\n       return this._resultId\n   }\n\n   /**\n    * The user that chose the result\n    * @returns {User}\n   */\n   get from() {\n       return this._from\n   }\n\n   /**\n    * Sender location, only for bots that require user location\n    * @returns {Location|null}\n   */\n   get location() {\n       return this._location\n   }\n\n   /**\n    * Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.\n    * @returns {string|null}\n   */\n   get inlineMessageId() {\n       return this._inlineMessageId\n   }\n\n   /**\n    * The query that was used to obtain the result\n    * @returns {string}\n   */\n   get query() {\n       return this._query\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {ChosenInlineResult}\n    */\n   static deserialize(raw) {\n      return new ChosenInlineResult(\n          raw['result_id'], \n          raw['from'] ? User.deserialize(raw['from']) : null, \n          raw['location'] ? Location.deserialize(raw['location']) : null, \n          raw['inline_message_id'] ? raw['inline_message_id'] : null, \n          raw['query']\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          result_id: this.resultId ? this.resultId : undefined, \n          from: this.from ? this.from.serialize() : undefined, \n          location: this.location ? this.location.serialize() : undefined, \n          inline_message_id: this.inlineMessageId ? this.inlineMessageId : undefined, \n          query: this.query ? this.query : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = ChosenInlineResult","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/CallbackQuery.js":"'use strict'\n\nconst User = require('./User')\nconst Message = require('./Message')\n\n/**\n * This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present.\n */\n\nclass CallbackQuery {\n   /**\n    *\n    * @param {string} id\n    * @param {User} from\n    * @param {Message|null} [message]\n    * @param {string|null} [inlineMessageId]\n    * @param {string} chatInstance\n    * @param {string|null} [data]\n    * @param {string|null} [gameShortName]\n   */\n   constructor(\n     id, \n     from, \n     message, \n     inlineMessageId, \n     chatInstance, \n     data, \n     gameShortName\n   ) {\n       this._id = id\n       this._from = from\n       this._message = message\n       this._inlineMessageId = inlineMessageId\n       this._chatInstance = chatInstance\n       this._data = data\n       this._gameShortName = gameShortName\n   }\n\n   /**\n    * Unique identifier for this query\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * Sender\n    * @returns {User}\n   */\n   get from() {\n       return this._from\n   }\n\n   /**\n    * Message with the callback button that originated the query. Note that message content and message date will not be available if the message is too old\n    * @returns {Message|null}\n   */\n   get message() {\n       return this._message\n   }\n\n   /**\n    * Identifier of the message sent via the bot in inline mode, that originated the query.\n    * @returns {string|null}\n   */\n   get inlineMessageId() {\n       return this._inlineMessageId\n   }\n\n   /**\n    * Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.\n    * @returns {string}\n   */\n   get chatInstance() {\n       return this._chatInstance\n   }\n\n   /**\n    * Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.\n    * @returns {string|null}\n   */\n   get data() {\n       return this._data\n   }\n\n   /**\n    * Short name of a Game to be returned, serves as the unique identifier for the game\n    * @returns {string|null}\n   */\n   get gameShortName() {\n       return this._gameShortName\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {CallbackQuery}\n    */\n   static deserialize(raw) {\n      return new CallbackQuery(\n          raw['id'], \n          raw['from'] ? User.deserialize(raw['from']) : null, \n          raw['message'] ? Message.deserialize(raw['message']) : null, \n          raw['inline_message_id'] ? raw['inline_message_id'] : null, \n          raw['chat_instance'], \n          raw['data'] ? raw['data'] : null, \n          raw['game_short_name'] ? raw['game_short_name'] : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          id: this.id ? this.id : undefined, \n          from: this.from ? this.from.serialize() : undefined, \n          message: this.message ? this.message.serialize() : undefined, \n          inline_message_id: this.inlineMessageId ? this.inlineMessageId : undefined, \n          chat_instance: this.chatInstance ? this.chatInstance : undefined, \n          data: this.data ? this.data : undefined, \n          game_short_name: this.gameShortName ? this.gameShortName : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = CallbackQuery","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/WebhookInfo.js":"'use strict'\n\n/**\n * Contains information about the current status of a webhook.\n */\n\nclass WebhookInfo {\n   /**\n    *\n    * @param {string} url\n    * @param {boolean} hasCustomCertificate\n    * @param {number} pendingUpdateCount\n    * @param {number|null} [lastErrorDate]\n    * @param {string|null} [lastErrorMessage]\n    * @param {number|null} [maxConnections]\n    * @param {string[]|null} [allowedUpdates]\n   */\n   constructor(\n     url, \n     hasCustomCertificate, \n     pendingUpdateCount, \n     lastErrorDate, \n     lastErrorMessage, \n     maxConnections, \n     allowedUpdates\n   ) {\n       this._url = url\n       this._hasCustomCertificate = hasCustomCertificate\n       this._pendingUpdateCount = pendingUpdateCount\n       this._lastErrorDate = lastErrorDate\n       this._lastErrorMessage = lastErrorMessage\n       this._maxConnections = maxConnections\n       this._allowedUpdates = allowedUpdates\n   }\n\n   /**\n    * Webhook URL, may be empty if webhook is not set up\n    * @returns {string}\n   */\n   get url() {\n       return this._url\n   }\n\n   /**\n    * True, if a custom certificate was provided for webhook certificate checks\n    * @returns {boolean}\n   */\n   get hasCustomCertificate() {\n       return this._hasCustomCertificate\n   }\n\n   /**\n    * Number of updates awaiting delivery\n    * @returns {number}\n   */\n   get pendingUpdateCount() {\n       return this._pendingUpdateCount\n   }\n\n   /**\n    * Unix time for the most recent error that happened when trying to deliver an update via webhook\n    * @returns {number|null}\n   */\n   get lastErrorDate() {\n       return this._lastErrorDate\n   }\n\n   /**\n    * Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook\n    * @returns {string|null}\n   */\n   get lastErrorMessage() {\n       return this._lastErrorMessage\n   }\n\n   /**\n    * Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery\n    * @returns {number|null}\n   */\n   get maxConnections() {\n       return this._maxConnections\n   }\n\n   /**\n    * A list of update types the bot is subscribed to. Defaults to all update types\n    * @returns {string[]|null}\n   */\n   get allowedUpdates() {\n       return this._allowedUpdates\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {WebhookInfo}\n    */\n   static deserialize(raw) {\n      return new WebhookInfo(\n          raw['url'], \n          raw['has_custom_certificate'], \n          raw['pending_update_count'], \n          raw['last_error_date'] ? raw['last_error_date'] : null, \n          raw['last_error_message'] ? raw['last_error_message'] : null, \n          raw['max_connections'] ? raw['max_connections'] : null, \n          raw['allowed_updates'] ? raw['allowed_updates'] : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          url: this.url ? this.url : undefined, \n          has_custom_certificate: this.hasCustomCertificate ? this.hasCustomCertificate : undefined, \n          pending_update_count: this.pendingUpdateCount ? this.pendingUpdateCount : undefined, \n          last_error_date: this.lastErrorDate ? this.lastErrorDate : undefined, \n          last_error_message: this.lastErrorMessage ? this.lastErrorMessage : undefined, \n          max_connections: this.maxConnections ? this.maxConnections : undefined, \n          allowed_updates: this.allowedUpdates ? this.allowedUpdates : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = WebhookInfo","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/UserProfilePhotos.js":"'use strict'\n\nconst PhotoSize = require('./PhotoSize')\n\n/**\n * This object represent a user's profile pictures.\n */\n\nclass UserProfilePhotos {\n   /**\n    *\n    * @param {number} totalCount\n    * @param {PhotoSize[][]} photos\n   */\n   constructor(totalCount, photos) {\n       this._totalCount = totalCount\n       this._photos = photos\n   }\n\n   /**\n    * Total number of profile pictures the target user has\n    * @returns {number}\n   */\n   get totalCount() {\n       return this._totalCount\n   }\n\n   /**\n    * Requested profile pictures (in up to 4 sizes each)\n    * @returns {PhotoSize[][]}\n   */\n   get photos() {\n       return this._photos\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {UserProfilePhotos}\n    */\n   static deserialize(raw) {\n      return new UserProfilePhotos(raw['total_count'], raw['photos'] ? raw['photos'].map(arr => arr.map(item => PhotoSize.deserialize(item))) : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          total_count: this.totalCount ? this.totalCount : undefined, \n          photos: this.photos ? this.photos.map(arr => arr.map(item => item.serialize())) : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = UserProfilePhotos","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/File.js":"'use strict'\n\n/**\n * This object represents a file ready to be downloaded. The file can be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile.\n */\n\nclass File {\n   /**\n    *\n    * @param {string} fileId\n    * @param {number|null} [fileSize]\n    * @param {string|null} [filePath]\n   */\n   constructor(fileId, fileSize, filePath) {\n       this._fileId = fileId\n       this._fileSize = fileSize\n       this._filePath = filePath\n   }\n\n   /**\n    * Unique identifier for this file\n    * @returns {string}\n   */\n   get fileId() {\n       return this._fileId\n   }\n\n   /**\n    * File size, if known\n    * @returns {number|null}\n   */\n   get fileSize() {\n       return this._fileSize\n   }\n\n   /**\n    * File path. Use https://api.telegram.org/file/bot<token>/<file_path> to get the file.\n    * @returns {string|null}\n   */\n   get filePath() {\n       return this._filePath\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {File}\n    */\n   static deserialize(raw) {\n      return new File(raw['file_id'], raw['file_size'] ? raw['file_size'] : null, raw['file_path'] ? raw['file_path'] : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          file_id: this.fileId ? this.fileId : undefined, \n          file_size: this.fileSize ? this.fileSize : undefined, \n          file_path: this.filePath ? this.filePath : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = File","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/ReplyKeyboardMarkup.js":"'use strict'\n\nconst KeyboardButton = require('./KeyboardButton')\n\n/**\n * This object represents a custom keyboard with reply options (see Introduction to bots for details and examples).\n */\n\nclass ReplyKeyboardMarkup {\n   /**\n    *\n    * @param {KeyboardButton[][]} keyboard\n    * @param {boolean|null} [resizeKeyboard]\n    * @param {boolean|null} [oneTimeKeyboard]\n    * @param {boolean|null} [selective]\n   */\n   constructor(keyboard, resizeKeyboard, oneTimeKeyboard, selective) {\n       this._keyboard = keyboard\n       this._resizeKeyboard = resizeKeyboard\n       this._oneTimeKeyboard = oneTimeKeyboard\n       this._selective = selective\n   }\n\n   /**\n    * Array of button rows, each represented by an Array of KeyboardButton objects\n    * @returns {KeyboardButton[][]}\n   */\n   get keyboard() {\n       return this._keyboard\n   }\n\n   /**\n    * Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard.\n    * @returns {boolean|null}\n   */\n   get resizeKeyboard() {\n       return this._resizeKeyboard\n   }\n\n   /**\n    * Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to false.\n    * @returns {boolean|null}\n   */\n   get oneTimeKeyboard() {\n       return this._oneTimeKeyboard\n   }\n\n   /**\n    * Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.Example: A user requests to change the bot‘s language, bot replies to the request with a keyboard to select the new language. Other users in the group don’t see the keyboard.\n    * @returns {boolean|null}\n   */\n   get selective() {\n       return this._selective\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {ReplyKeyboardMarkup}\n    */\n   static deserialize(raw) {\n      return new ReplyKeyboardMarkup(raw['keyboard'] ? raw['keyboard'].map(arr => arr.map(item => KeyboardButton.deserialize(item))) : null, raw['resize_keyboard'] ? raw['resize_keyboard'] : null, raw['one_time_keyboard'] ? raw['one_time_keyboard'] : null, raw['selective'] ? raw['selective'] : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          keyboard: this.keyboard ? this.keyboard.map(arr => arr.map(item => item.serialize())) : undefined, \n          resize_keyboard: this.resizeKeyboard ? this.resizeKeyboard : undefined, \n          one_time_keyboard: this.oneTimeKeyboard ? this.oneTimeKeyboard : undefined, \n          selective: this.selective ? this.selective : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = ReplyKeyboardMarkup","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/KeyboardButton.js":"'use strict'\n\n/**\n * This object represents one button of the reply keyboard. For simple text buttons String can be used instead of this object to specify text of the button. Optional fields are mutually exclusive.\n */\n\nclass KeyboardButton {\n   /**\n    *\n    * @param {string} text\n    * @param {boolean|null} [requestContact]\n    * @param {boolean|null} [requestLocation]\n   */\n   constructor(text, requestContact, requestLocation) {\n       this._text = text\n       this._requestContact = requestContact\n       this._requestLocation = requestLocation\n   }\n\n   /**\n    * Text of the button. If none of the optional fields are used, it will be sent to the bot as a message when the button is pressed\n    * @returns {string}\n   */\n   get text() {\n       return this._text\n   }\n\n   /**\n    * If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only\n    * @returns {boolean|null}\n   */\n   get requestContact() {\n       return this._requestContact\n   }\n\n   /**\n    * If True, the user's current location will be sent when the button is pressed. Available in private chats only\n    * @returns {boolean|null}\n   */\n   get requestLocation() {\n       return this._requestLocation\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {KeyboardButton}\n    */\n   static deserialize(raw) {\n      return new KeyboardButton(raw['text'], raw['request_contact'] ? raw['request_contact'] : null, raw['request_location'] ? raw['request_location'] : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          text: this.text ? this.text : undefined, \n          request_contact: this.requestContact ? this.requestContact : undefined, \n          request_location: this.requestLocation ? this.requestLocation : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = KeyboardButton","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/ReplyKeyboardRemove.js":"'use strict'\n\n/**\n * Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup).\n */\n\nclass ReplyKeyboardRemove {\n   /**\n    *\n    * @param {boolean} removeKeyboard\n    * @param {boolean|null} [selective]\n   */\n   constructor(removeKeyboard, selective) {\n       this._removeKeyboard = removeKeyboard\n       this._selective = selective\n   }\n\n   /**\n    * Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup)\n    * @returns {boolean}\n   */\n   get removeKeyboard() {\n       return this._removeKeyboard\n   }\n\n   /**\n    * Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.\n    * @returns {boolean|null}\n   */\n   get selective() {\n       return this._selective\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {ReplyKeyboardRemove}\n    */\n   static deserialize(raw) {\n      return new ReplyKeyboardRemove(raw['remove_keyboard'], raw['selective'] ? raw['selective'] : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          remove_keyboard: this.removeKeyboard ? this.removeKeyboard : undefined, \n          selective: this.selective ? this.selective : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = ReplyKeyboardRemove","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineKeyboardMarkup.js":"'use strict'\n\nconst InlineKeyboardButton = require('./InlineKeyboardButton')\n\n/**\n * This object represents an inline keyboard that appears right next to the message it belongs to.\n */\n\nclass InlineKeyboardMarkup {\n   /**\n    *\n    * @param {InlineKeyboardButton[][]} inlineKeyboard\n   */\n   constructor(inlineKeyboard) {\n       this._inlineKeyboard = inlineKeyboard\n   }\n\n   /**\n    * Array of button rows, each represented by an Array of InlineKeyboardButton objects\n    * @returns {InlineKeyboardButton[][]}\n   */\n   get inlineKeyboard() {\n       return this._inlineKeyboard\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineKeyboardMarkup}\n    */\n   static deserialize(raw) {\n      return new InlineKeyboardMarkup(raw['inline_keyboard'] ? raw['inline_keyboard'].map(arr => arr.map(item => InlineKeyboardButton.deserialize(item))) : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          inline_keyboard: this.inlineKeyboard ? this.inlineKeyboard.map(arr => arr.map(item => item.serialize())) : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineKeyboardMarkup","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineKeyboardButton.js":"'use strict'\n\nconst CallbackGame = require('./CallbackGame')\n\n/**\n * This object represents one button of an inline keyboard. You must use exactly one of the optional fields.\n */\n\nclass InlineKeyboardButton {\n   /**\n    *\n    * @param {string} text\n    * @param {string|null} [url]\n    * @param {string|null} [callbackData]\n    * @param {string|null} [switchInlineQuery]\n    * @param {string|null} [switchInlineQueryCurrentChat]\n    * @param {CallbackGame|null} [callbackGame]\n   */\n   constructor(text, url, callbackData, switchInlineQuery, switchInlineQueryCurrentChat, callbackGame) {\n       this._text = text\n       this._url = url\n       this._callbackData = callbackData\n       this._switchInlineQuery = switchInlineQuery\n       this._switchInlineQueryCurrentChat = switchInlineQueryCurrentChat\n       this._callbackGame = callbackGame\n   }\n\n   /**\n    * Label text on the button\n    * @returns {string}\n   */\n   get text() {\n       return this._text\n   }\n\n   /**\n    * HTTP url to be opened when button is pressed\n    * @returns {string|null}\n   */\n   get url() {\n       return this._url\n   }\n\n   /**\n    * Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes\n    * @returns {string|null}\n   */\n   get callbackData() {\n       return this._callbackData\n   }\n\n   /**\n    * If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot‘s username and the specified inline query in the input field. Can be empty, in which case just the bot’s username will be inserted.Note: This offers an easy way for users to start using your bot in inline mode when they are currently in a private chat with it. Especially useful when combined with switch_pm… actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.\n    * @returns {string|null}\n   */\n   get switchInlineQuery() {\n       return this._switchInlineQuery\n   }\n\n   /**\n    * If set, pressing the button will insert the bot‘s username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot’s username will be inserted.This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options.\n    * @returns {string|null}\n   */\n   get switchInlineQueryCurrentChat() {\n       return this._switchInlineQueryCurrentChat\n   }\n\n   /**\n    * Description of the game that will be launched when the user presses the button.NOTE: This type of button must always be the first button in the first row.\n    * @returns {CallbackGame|null}\n   */\n   get callbackGame() {\n       return this._callbackGame\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineKeyboardButton}\n    */\n   static deserialize(raw) {\n      return new InlineKeyboardButton(\n          raw['text'], \n          raw['url'] ? raw['url'] : null, \n          raw['callback_data'] ? raw['callback_data'] : null, \n          raw['switch_inline_query'] ? raw['switch_inline_query'] : null, \n          raw['switch_inline_query_current_chat'] ? raw['switch_inline_query_current_chat'] : null, \n          raw['callback_game'] ? CallbackGame.deserialize(raw['callback_game']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          text: this.text ? this.text : undefined, \n          url: this.url ? this.url : undefined, \n          callback_data: this.callbackData ? this.callbackData : undefined, \n          switch_inline_query: this.switchInlineQuery ? this.switchInlineQuery : undefined, \n          switch_inline_query_current_chat: this.switchInlineQueryCurrentChat ? this.switchInlineQueryCurrentChat : undefined, \n          callback_game: this.callbackGame ? this.callbackGame.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineKeyboardButton","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/CallbackGame.js":"'use strict'\n\nclass CallbackGame {\n    //placeholder\n}\n\nmodule.exports = CallbackGame","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/ForceReply.js":"'use strict'\n\n/**\n * Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot‘s message and tapped ’Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode.\n */\n\nclass ForceReply {\n   /**\n    *\n    * @param {boolean} forceReply\n    * @param {boolean|null} [selective]\n   */\n   constructor(forceReply, selective) {\n       this._forceReply = forceReply\n       this._selective = selective\n   }\n\n   /**\n    * Shows reply interface to the user, as if they manually selected the bot‘s message and tapped ’Reply'\n    * @returns {boolean}\n   */\n   get forceReply() {\n       return this._forceReply\n   }\n\n   /**\n    * Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.\n    * @returns {boolean|null}\n   */\n   get selective() {\n       return this._selective\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {ForceReply}\n    */\n   static deserialize(raw) {\n      return new ForceReply(raw['force_reply'], raw['selective'] ? raw['selective'] : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          force_reply: this.forceReply ? this.forceReply : undefined, \n          selective: this.selective ? this.selective : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = ForceReply","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/ChatMember.js":"'use strict'\n\nconst User = require('./User')\n\n/**\n * This object contains information about one member of the chat.\n */\n\nclass ChatMember {\n   /**\n    *\n    * @param {User} user\n    * @param {string} status\n   */\n   constructor(user, status) {\n       this._user = user\n       this._status = status\n   }\n\n   /**\n    * Information about the user\n    * @returns {User}\n   */\n   get user() {\n       return this._user\n   }\n\n   /**\n    * The member's status in the chat. Can be “creator”, “administrator”, “member”, “left” or “kicked”\n    * @returns {string}\n   */\n   get status() {\n       return this._status\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {ChatMember}\n    */\n   static deserialize(raw) {\n      return new ChatMember(raw['user'] ? User.deserialize(raw['user']) : null, raw['status'])\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          user: this.user ? this.user.serialize() : undefined, \n          status: this.status ? this.status : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = ChatMember","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/ResponseParameters.js":"'use strict'\n\n/**\n * Contains information about why a request was unsuccessfull.\n */\n\nclass ResponseParameters {\n   /**\n    *\n    * @param {number|null} [migrateToChatId]\n    * @param {number|null} [retryAfter]\n   */\n   constructor(migrateToChatId, retryAfter) {\n       this._migrateToChatId = migrateToChatId\n       this._retryAfter = retryAfter\n   }\n\n   /**\n    * The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.\n    * @returns {number|null}\n   */\n   get migrateToChatId() {\n       return this._migrateToChatId\n   }\n\n   /**\n    * In case of exceeding flood control, the number of seconds left to wait before the request can be repeated\n    * @returns {number|null}\n   */\n   get retryAfter() {\n       return this._retryAfter\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {ResponseParameters}\n    */\n   static deserialize(raw) {\n      return new ResponseParameters(raw['migrate_to_chat_id'] ? raw['migrate_to_chat_id'] : null, raw['retry_after'] ? raw['retry_after'] : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          migrate_to_chat_id: this.migrateToChatId ? this.migrateToChatId : undefined, \n          retry_after: this.retryAfter ? this.retryAfter : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = ResponseParameters","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultArticle.js":"'use strict'\n\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to an article or web page.\n */\n\nclass InlineQueryResultArticle extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} title\n    * @param {InputMessageContent} inputMessageContent\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {string|null} [url]\n    * @param {boolean|null} [hideUrl]\n    * @param {string|null} [description]\n    * @param {string|null} [thumbUrl]\n    * @param {number|null} [thumbWidth]\n    * @param {number|null} [thumbHeight]\n   */\n   constructor(\n     type, \n     id, \n     title, \n     inputMessageContent, \n     replyMarkup, \n     url, \n     hideUrl, \n     description, \n     thumbUrl, \n     thumbWidth, \n     thumbHeight\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._title = title\n       this._inputMessageContent = inputMessageContent\n       this._replyMarkup = replyMarkup\n       this._url = url\n       this._hideUrl = hideUrl\n       this._description = description\n       this._thumbUrl = thumbUrl\n       this._thumbWidth = thumbWidth\n       this._thumbHeight = thumbHeight\n   }\n\n   /**\n    * Type of the result, must be article\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 Bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * Title of the result\n    * @returns {string}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Content of the message to be sent\n    * @returns {InputMessageContent}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * URL of the result\n    * @returns {string|null}\n   */\n   get url() {\n       return this._url\n   }\n\n   /**\n    * Pass True, if you don't want the URL to be shown in the message\n    * @returns {boolean|null}\n   */\n   get hideUrl() {\n       return this._hideUrl\n   }\n\n   /**\n    * Short description of the result\n    * @returns {string|null}\n   */\n   get description() {\n       return this._description\n   }\n\n   /**\n    * Url of the thumbnail for the result\n    * @returns {string|null}\n   */\n   get thumbUrl() {\n       return this._thumbUrl\n   }\n\n   /**\n    * Thumbnail width\n    * @returns {number|null}\n   */\n   get thumbWidth() {\n       return this._thumbWidth\n   }\n\n   /**\n    * Thumbnail height\n    * @returns {number|null}\n   */\n   get thumbHeight() {\n       return this._thumbHeight\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultArticle}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultArticle(\n          raw['type'], \n          raw['id'], \n          raw['title'], \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['url'] ? raw['url'] : null, \n          raw['hide_url'] ? raw['hide_url'] : null, \n          raw['description'] ? raw['description'] : null, \n          raw['thumb_url'] ? raw['thumb_url'] : null, \n          raw['thumb_width'] ? raw['thumb_width'] : null, \n          raw['thumb_height'] ? raw['thumb_height'] : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          title: this.title ? this.title : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          url: this.url ? this.url : undefined, \n          hide_url: this.hideUrl ? this.hideUrl : undefined, \n          description: this.description ? this.description : undefined, \n          thumb_url: this.thumbUrl ? this.thumbUrl : undefined, \n          thumb_width: this.thumbWidth ? this.thumbWidth : undefined, \n          thumb_height: this.thumbHeight ? this.thumbHeight : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultArticle","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InputMessageContent.js":"'use strict'\n\nclass InputMessageContent {\n    /**\n     *\n     * @param {Object} raw\n     * @returns {InputTextMessageContent|InputVenueMessageContent|InputContactMessageContent|InputLocationMessageContent}\n     */\n    static deserialize(raw) {\n        switch (raw) {\n            case raw.message_text:\n                return require('./InputTextMessageContent').deserialize(raw)\n            case raw.latitude && raw.title:\n                return require('./InputVenueMessageContent').deserialize(raw)\n            case raw.phone_number:\n                return require('./InputContactMessageContent').deserialize(raw)\n            case raw.latitude:\n                return require('./InputLocationMessageContent').deserialize(raw)\n        }\n    }\n}\n\nmodule.exports = InputMessageContent","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResult.js":"'use strict' \n\nclass InlineQueryResult {\n    toJSON() { }\n    \n    get id() { }\n}\n\nmodule.exports = InlineQueryResult","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultPhoto.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.\n */\n\nclass InlineQueryResultPhoto extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} photoUrl\n    * @param {string} thumbUrl\n    * @param {number|null} [photoWidth]\n    * @param {number|null} [photoHeight]\n    * @param {string|null} [title]\n    * @param {string|null} [description]\n    * @param {string|null} [caption]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n   */\n   constructor(\n     type, \n     id, \n     photoUrl, \n     thumbUrl, \n     photoWidth, \n     photoHeight, \n     title, \n     description, \n     caption, \n     replyMarkup, \n     inputMessageContent\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._photoUrl = photoUrl\n       this._thumbUrl = thumbUrl\n       this._photoWidth = photoWidth\n       this._photoHeight = photoHeight\n       this._title = title\n       this._description = description\n       this._caption = caption\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n   }\n\n   /**\n    * Type of the result, must be photo\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * A valid URL of the photo. Photo must be in jpeg format. Photo size must not exceed 5MB\n    * @returns {string}\n   */\n   get photoUrl() {\n       return this._photoUrl\n   }\n\n   /**\n    * URL of the thumbnail for the photo\n    * @returns {string}\n   */\n   get thumbUrl() {\n       return this._thumbUrl\n   }\n\n   /**\n    * Width of the photo\n    * @returns {number|null}\n   */\n   get photoWidth() {\n       return this._photoWidth\n   }\n\n   /**\n    * Height of the photo\n    * @returns {number|null}\n   */\n   get photoHeight() {\n       return this._photoHeight\n   }\n\n   /**\n    * Title for the result\n    * @returns {string|null}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Short description of the result\n    * @returns {string|null}\n   */\n   get description() {\n       return this._description\n   }\n\n   /**\n    * Caption of the photo to be sent, 0-200 characters\n    * @returns {string|null}\n   */\n   get caption() {\n       return this._caption\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the photo\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultPhoto}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultPhoto(\n          raw['type'], \n          raw['id'], \n          raw['photo_url'], \n          raw['thumb_url'], \n          raw['photo_width'] ? raw['photo_width'] : null, \n          raw['photo_height'] ? raw['photo_height'] : null, \n          raw['title'] ? raw['title'] : null, \n          raw['description'] ? raw['description'] : null, \n          raw['caption'] ? raw['caption'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          photo_url: this.photoUrl ? this.photoUrl : undefined, \n          thumb_url: this.thumbUrl ? this.thumbUrl : undefined, \n          photo_width: this.photoWidth ? this.photoWidth : undefined, \n          photo_height: this.photoHeight ? this.photoHeight : undefined, \n          title: this.title ? this.title : undefined, \n          description: this.description ? this.description : undefined, \n          caption: this.caption ? this.caption : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultPhoto","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultGif.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.\n */\n\nclass InlineQueryResultGif extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} gifUrl\n    * @param {number|null} [gifWidth]\n    * @param {number|null} [gifHeight]\n    * @param {string} thumbUrl\n    * @param {string|null} [title]\n    * @param {string|null} [caption]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n   */\n   constructor(\n     type, \n     id, \n     gifUrl, \n     gifWidth, \n     gifHeight, \n     thumbUrl, \n     title, \n     caption, \n     replyMarkup, \n     inputMessageContent\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._gifUrl = gifUrl\n       this._gifWidth = gifWidth\n       this._gifHeight = gifHeight\n       this._thumbUrl = thumbUrl\n       this._title = title\n       this._caption = caption\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n   }\n\n   /**\n    * Type of the result, must be gif\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * A valid URL for the GIF file. File size must not exceed 1MB\n    * @returns {string}\n   */\n   get gifUrl() {\n       return this._gifUrl\n   }\n\n   /**\n    * Width of the GIF\n    * @returns {number|null}\n   */\n   get gifWidth() {\n       return this._gifWidth\n   }\n\n   /**\n    * Height of the GIF\n    * @returns {number|null}\n   */\n   get gifHeight() {\n       return this._gifHeight\n   }\n\n   /**\n    * URL of the static thumbnail for the result (jpeg or gif)\n    * @returns {string}\n   */\n   get thumbUrl() {\n       return this._thumbUrl\n   }\n\n   /**\n    * Title for the result\n    * @returns {string|null}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Caption of the GIF file to be sent, 0-200 characters\n    * @returns {string|null}\n   */\n   get caption() {\n       return this._caption\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the GIF animation\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultGif}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultGif(\n          raw['type'], \n          raw['id'], \n          raw['gif_url'], \n          raw['gif_width'] ? raw['gif_width'] : null, \n          raw['gif_height'] ? raw['gif_height'] : null, \n          raw['thumb_url'], \n          raw['title'] ? raw['title'] : null, \n          raw['caption'] ? raw['caption'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          gif_url: this.gifUrl ? this.gifUrl : undefined, \n          gif_width: this.gifWidth ? this.gifWidth : undefined, \n          gif_height: this.gifHeight ? this.gifHeight : undefined, \n          thumb_url: this.thumbUrl ? this.thumbUrl : undefined, \n          title: this.title ? this.title : undefined, \n          caption: this.caption ? this.caption : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultGif","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultMpeg4Gif.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.\n */\n\nclass InlineQueryResultMpeg4Gif extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} mpeg4Url\n    * @param {number|null} [mpeg4Width]\n    * @param {number|null} [mpeg4Height]\n    * @param {string} thumbUrl\n    * @param {string|null} [title]\n    * @param {string|null} [caption]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n   */\n   constructor(\n     type, \n     id, \n     mpeg4Url, \n     mpeg4Width, \n     mpeg4Height, \n     thumbUrl, \n     title, \n     caption, \n     replyMarkup, \n     inputMessageContent\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._mpeg4Url = mpeg4Url\n       this._mpeg4Width = mpeg4Width\n       this._mpeg4Height = mpeg4Height\n       this._thumbUrl = thumbUrl\n       this._title = title\n       this._caption = caption\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n   }\n\n   /**\n    * Type of the result, must be mpeg4_gif\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * A valid URL for the MP4 file. File size must not exceed 1MB\n    * @returns {string}\n   */\n   get mpeg4Url() {\n       return this._mpeg4Url\n   }\n\n   /**\n    * Video width\n    * @returns {number|null}\n   */\n   get mpeg4Width() {\n       return this._mpeg4Width\n   }\n\n   /**\n    * Video height\n    * @returns {number|null}\n   */\n   get mpeg4Height() {\n       return this._mpeg4Height\n   }\n\n   /**\n    * URL of the static thumbnail (jpeg or gif) for the result\n    * @returns {string}\n   */\n   get thumbUrl() {\n       return this._thumbUrl\n   }\n\n   /**\n    * Title for the result\n    * @returns {string|null}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Caption of the MPEG-4 file to be sent, 0-200 characters\n    * @returns {string|null}\n   */\n   get caption() {\n       return this._caption\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the video animation\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultMpeg4Gif}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultMpeg4Gif(\n          raw['type'], \n          raw['id'], \n          raw['mpeg4_url'], \n          raw['mpeg4_width'] ? raw['mpeg4_width'] : null, \n          raw['mpeg4_height'] ? raw['mpeg4_height'] : null, \n          raw['thumb_url'], \n          raw['title'] ? raw['title'] : null, \n          raw['caption'] ? raw['caption'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          mpeg4_url: this.mpeg4Url ? this.mpeg4Url : undefined, \n          mpeg4_width: this.mpeg4Width ? this.mpeg4Width : undefined, \n          mpeg4_height: this.mpeg4Height ? this.mpeg4Height : undefined, \n          thumb_url: this.thumbUrl ? this.thumbUrl : undefined, \n          title: this.title ? this.title : undefined, \n          caption: this.caption ? this.caption : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultMpeg4Gif","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultVideo.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.\n */\n\nclass InlineQueryResultVideo extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} videoUrl\n    * @param {string} mimeType\n    * @param {string} thumbUrl\n    * @param {string} title\n    * @param {string|null} [caption]\n    * @param {number|null} [videoWidth]\n    * @param {number|null} [videoHeight]\n    * @param {number|null} [videoDuration]\n    * @param {string|null} [description]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n   */\n   constructor(\n     type, \n     id, \n     videoUrl, \n     mimeType, \n     thumbUrl, \n     title, \n     caption, \n     videoWidth, \n     videoHeight, \n     videoDuration, \n     description, \n     replyMarkup, \n     inputMessageContent\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._videoUrl = videoUrl\n       this._mimeType = mimeType\n       this._thumbUrl = thumbUrl\n       this._title = title\n       this._caption = caption\n       this._videoWidth = videoWidth\n       this._videoHeight = videoHeight\n       this._videoDuration = videoDuration\n       this._description = description\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n   }\n\n   /**\n    * Type of the result, must be video\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * A valid URL for the embedded video player or video file\n    * @returns {string}\n   */\n   get videoUrl() {\n       return this._videoUrl\n   }\n\n   /**\n    * Mime type of the content of video url, “text/html” or “video/mp4”\n    * @returns {string}\n   */\n   get mimeType() {\n       return this._mimeType\n   }\n\n   /**\n    * URL of the thumbnail (jpeg only) for the video\n    * @returns {string}\n   */\n   get thumbUrl() {\n       return this._thumbUrl\n   }\n\n   /**\n    * Title for the result\n    * @returns {string}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Caption of the video to be sent, 0-200 characters\n    * @returns {string|null}\n   */\n   get caption() {\n       return this._caption\n   }\n\n   /**\n    * Video width\n    * @returns {number|null}\n   */\n   get videoWidth() {\n       return this._videoWidth\n   }\n\n   /**\n    * Video height\n    * @returns {number|null}\n   */\n   get videoHeight() {\n       return this._videoHeight\n   }\n\n   /**\n    * Video duration in seconds\n    * @returns {number|null}\n   */\n   get videoDuration() {\n       return this._videoDuration\n   }\n\n   /**\n    * Short description of the result\n    * @returns {string|null}\n   */\n   get description() {\n       return this._description\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the video\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultVideo}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultVideo(\n          raw['type'], \n          raw['id'], \n          raw['video_url'], \n          raw['mime_type'], \n          raw['thumb_url'], \n          raw['title'], \n          raw['caption'] ? raw['caption'] : null, \n          raw['video_width'] ? raw['video_width'] : null, \n          raw['video_height'] ? raw['video_height'] : null, \n          raw['video_duration'] ? raw['video_duration'] : null, \n          raw['description'] ? raw['description'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          video_url: this.videoUrl ? this.videoUrl : undefined, \n          mime_type: this.mimeType ? this.mimeType : undefined, \n          thumb_url: this.thumbUrl ? this.thumbUrl : undefined, \n          title: this.title ? this.title : undefined, \n          caption: this.caption ? this.caption : undefined, \n          video_width: this.videoWidth ? this.videoWidth : undefined, \n          video_height: this.videoHeight ? this.videoHeight : undefined, \n          video_duration: this.videoDuration ? this.videoDuration : undefined, \n          description: this.description ? this.description : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultVideo","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultAudio.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to an mp3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.\n */\n\nclass InlineQueryResultAudio extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} audioUrl\n    * @param {string} title\n    * @param {string|null} [caption]\n    * @param {string|null} [performer]\n    * @param {number|null} [audioDuration]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n   */\n   constructor(\n     type, \n     id, \n     audioUrl, \n     title, \n     caption, \n     performer, \n     audioDuration, \n     replyMarkup, \n     inputMessageContent\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._audioUrl = audioUrl\n       this._title = title\n       this._caption = caption\n       this._performer = performer\n       this._audioDuration = audioDuration\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n   }\n\n   /**\n    * Type of the result, must be audio\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * A valid URL for the audio file\n    * @returns {string}\n   */\n   get audioUrl() {\n       return this._audioUrl\n   }\n\n   /**\n    * Title\n    * @returns {string}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Caption, 0-200 characters\n    * @returns {string|null}\n   */\n   get caption() {\n       return this._caption\n   }\n\n   /**\n    * Performer\n    * @returns {string|null}\n   */\n   get performer() {\n       return this._performer\n   }\n\n   /**\n    * Audio duration in seconds\n    * @returns {number|null}\n   */\n   get audioDuration() {\n       return this._audioDuration\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the audio\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultAudio}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultAudio(\n          raw['type'], \n          raw['id'], \n          raw['audio_url'], \n          raw['title'], \n          raw['caption'] ? raw['caption'] : null, \n          raw['performer'] ? raw['performer'] : null, \n          raw['audio_duration'] ? raw['audio_duration'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          audio_url: this.audioUrl ? this.audioUrl : undefined, \n          title: this.title ? this.title : undefined, \n          caption: this.caption ? this.caption : undefined, \n          performer: this.performer ? this.performer : undefined, \n          audio_duration: this.audioDuration ? this.audioDuration : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultAudio","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultVoice.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to a voice recording in an .ogg container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the the voice message.\n */\n\nclass InlineQueryResultVoice extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} voiceUrl\n    * @param {string} title\n    * @param {string|null} [caption]\n    * @param {number|null} [voiceDuration]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n   */\n   constructor(\n     type, \n     id, \n     voiceUrl, \n     title, \n     caption, \n     voiceDuration, \n     replyMarkup, \n     inputMessageContent\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._voiceUrl = voiceUrl\n       this._title = title\n       this._caption = caption\n       this._voiceDuration = voiceDuration\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n   }\n\n   /**\n    * Type of the result, must be voice\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * A valid URL for the voice recording\n    * @returns {string}\n   */\n   get voiceUrl() {\n       return this._voiceUrl\n   }\n\n   /**\n    * Recording title\n    * @returns {string}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Caption, 0-200 characters\n    * @returns {string|null}\n   */\n   get caption() {\n       return this._caption\n   }\n\n   /**\n    * Recording duration in seconds\n    * @returns {number|null}\n   */\n   get voiceDuration() {\n       return this._voiceDuration\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the voice recording\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultVoice}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultVoice(\n          raw['type'], \n          raw['id'], \n          raw['voice_url'], \n          raw['title'], \n          raw['caption'] ? raw['caption'] : null, \n          raw['voice_duration'] ? raw['voice_duration'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          voice_url: this.voiceUrl ? this.voiceUrl : undefined, \n          title: this.title ? this.title : undefined, \n          caption: this.caption ? this.caption : undefined, \n          voice_duration: this.voiceDuration ? this.voiceDuration : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultVoice","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultDocument.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file. Currently, only .PDF and .ZIP files can be sent using this method.\n */\n\nclass InlineQueryResultDocument extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} title\n    * @param {string|null} [caption]\n    * @param {string} documentUrl\n    * @param {string} mimeType\n    * @param {string|null} [description]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n    * @param {string|null} [thumbUrl]\n    * @param {number|null} [thumbWidth]\n    * @param {number|null} [thumbHeight]\n   */\n   constructor(\n     type, \n     id, \n     title, \n     caption, \n     documentUrl, \n     mimeType, \n     description, \n     replyMarkup, \n     inputMessageContent, \n     thumbUrl, \n     thumbWidth, \n     thumbHeight\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._title = title\n       this._caption = caption\n       this._documentUrl = documentUrl\n       this._mimeType = mimeType\n       this._description = description\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n       this._thumbUrl = thumbUrl\n       this._thumbWidth = thumbWidth\n       this._thumbHeight = thumbHeight\n   }\n\n   /**\n    * Type of the result, must be document\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * Title for the result\n    * @returns {string}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Caption of the document to be sent, 0-200 characters\n    * @returns {string|null}\n   */\n   get caption() {\n       return this._caption\n   }\n\n   /**\n    * A valid URL for the file\n    * @returns {string}\n   */\n   get documentUrl() {\n       return this._documentUrl\n   }\n\n   /**\n    * Mime type of the content of the file, either “application/pdf” or “application/zip”\n    * @returns {string}\n   */\n   get mimeType() {\n       return this._mimeType\n   }\n\n   /**\n    * Short description of the result\n    * @returns {string|null}\n   */\n   get description() {\n       return this._description\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the file\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    * URL of the thumbnail (jpeg only) for the file\n    * @returns {string|null}\n   */\n   get thumbUrl() {\n       return this._thumbUrl\n   }\n\n   /**\n    * Thumbnail width\n    * @returns {number|null}\n   */\n   get thumbWidth() {\n       return this._thumbWidth\n   }\n\n   /**\n    * Thumbnail height\n    * @returns {number|null}\n   */\n   get thumbHeight() {\n       return this._thumbHeight\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultDocument}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultDocument(\n          raw['type'], \n          raw['id'], \n          raw['title'], \n          raw['caption'] ? raw['caption'] : null, \n          raw['document_url'], \n          raw['mime_type'], \n          raw['description'] ? raw['description'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null, \n          raw['thumb_url'] ? raw['thumb_url'] : null, \n          raw['thumb_width'] ? raw['thumb_width'] : null, \n          raw['thumb_height'] ? raw['thumb_height'] : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          title: this.title ? this.title : undefined, \n          caption: this.caption ? this.caption : undefined, \n          document_url: this.documentUrl ? this.documentUrl : undefined, \n          mime_type: this.mimeType ? this.mimeType : undefined, \n          description: this.description ? this.description : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined, \n          thumb_url: this.thumbUrl ? this.thumbUrl : undefined, \n          thumb_width: this.thumbWidth ? this.thumbWidth : undefined, \n          thumb_height: this.thumbHeight ? this.thumbHeight : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultDocument","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultLocation.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the location.\n */\n\nclass InlineQueryResultLocation extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {number} latitude\n    * @param {number} longitude\n    * @param {string} title\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n    * @param {string|null} [thumbUrl]\n    * @param {number|null} [thumbWidth]\n    * @param {number|null} [thumbHeight]\n   */\n   constructor(\n     type, \n     id, \n     latitude, \n     longitude, \n     title, \n     replyMarkup, \n     inputMessageContent, \n     thumbUrl, \n     thumbWidth, \n     thumbHeight\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._latitude = latitude\n       this._longitude = longitude\n       this._title = title\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n       this._thumbUrl = thumbUrl\n       this._thumbWidth = thumbWidth\n       this._thumbHeight = thumbHeight\n   }\n\n   /**\n    * Type of the result, must be location\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 Bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * Location latitude in degrees\n    * @returns {number}\n   */\n   get latitude() {\n       return this._latitude\n   }\n\n   /**\n    * Location longitude in degrees\n    * @returns {number}\n   */\n   get longitude() {\n       return this._longitude\n   }\n\n   /**\n    * Location title\n    * @returns {string}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the location\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    * Url of the thumbnail for the result\n    * @returns {string|null}\n   */\n   get thumbUrl() {\n       return this._thumbUrl\n   }\n\n   /**\n    * Thumbnail width\n    * @returns {number|null}\n   */\n   get thumbWidth() {\n       return this._thumbWidth\n   }\n\n   /**\n    * Thumbnail height\n    * @returns {number|null}\n   */\n   get thumbHeight() {\n       return this._thumbHeight\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultLocation}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultLocation(\n          raw['type'], \n          raw['id'], \n          raw['latitude'], \n          raw['longitude'], \n          raw['title'], \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null, \n          raw['thumb_url'] ? raw['thumb_url'] : null, \n          raw['thumb_width'] ? raw['thumb_width'] : null, \n          raw['thumb_height'] ? raw['thumb_height'] : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          latitude: this.latitude ? this.latitude : undefined, \n          longitude: this.longitude ? this.longitude : undefined, \n          title: this.title ? this.title : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined, \n          thumb_url: this.thumbUrl ? this.thumbUrl : undefined, \n          thumb_width: this.thumbWidth ? this.thumbWidth : undefined, \n          thumb_height: this.thumbHeight ? this.thumbHeight : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultLocation","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultVenue.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the venue.\n */\n\nclass InlineQueryResultVenue extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {number} latitude\n    * @param {number} longitude\n    * @param {string} title\n    * @param {string} address\n    * @param {string|null} [foursquareId]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n    * @param {string|null} [thumbUrl]\n    * @param {number|null} [thumbWidth]\n    * @param {number|null} [thumbHeight]\n   */\n   constructor(\n     type, \n     id, \n     latitude, \n     longitude, \n     title, \n     address, \n     foursquareId, \n     replyMarkup, \n     inputMessageContent, \n     thumbUrl, \n     thumbWidth, \n     thumbHeight\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._latitude = latitude\n       this._longitude = longitude\n       this._title = title\n       this._address = address\n       this._foursquareId = foursquareId\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n       this._thumbUrl = thumbUrl\n       this._thumbWidth = thumbWidth\n       this._thumbHeight = thumbHeight\n   }\n\n   /**\n    * Type of the result, must be venue\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 Bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * Latitude of the venue location in degrees\n    * @returns {number}\n   */\n   get latitude() {\n       return this._latitude\n   }\n\n   /**\n    * Longitude of the venue location in degrees\n    * @returns {number}\n   */\n   get longitude() {\n       return this._longitude\n   }\n\n   /**\n    * Title of the venue\n    * @returns {string}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Address of the venue\n    * @returns {string}\n   */\n   get address() {\n       return this._address\n   }\n\n   /**\n    * Foursquare identifier of the venue if known\n    * @returns {string|null}\n   */\n   get foursquareId() {\n       return this._foursquareId\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the venue\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    * Url of the thumbnail for the result\n    * @returns {string|null}\n   */\n   get thumbUrl() {\n       return this._thumbUrl\n   }\n\n   /**\n    * Thumbnail width\n    * @returns {number|null}\n   */\n   get thumbWidth() {\n       return this._thumbWidth\n   }\n\n   /**\n    * Thumbnail height\n    * @returns {number|null}\n   */\n   get thumbHeight() {\n       return this._thumbHeight\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultVenue}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultVenue(\n          raw['type'], \n          raw['id'], \n          raw['latitude'], \n          raw['longitude'], \n          raw['title'], \n          raw['address'], \n          raw['foursquare_id'] ? raw['foursquare_id'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null, \n          raw['thumb_url'] ? raw['thumb_url'] : null, \n          raw['thumb_width'] ? raw['thumb_width'] : null, \n          raw['thumb_height'] ? raw['thumb_height'] : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          latitude: this.latitude ? this.latitude : undefined, \n          longitude: this.longitude ? this.longitude : undefined, \n          title: this.title ? this.title : undefined, \n          address: this.address ? this.address : undefined, \n          foursquare_id: this.foursquareId ? this.foursquareId : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined, \n          thumb_url: this.thumbUrl ? this.thumbUrl : undefined, \n          thumb_width: this.thumbWidth ? this.thumbWidth : undefined, \n          thumb_height: this.thumbHeight ? this.thumbHeight : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultVenue","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultContact.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the contact.\n */\n\nclass InlineQueryResultContact extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} phoneNumber\n    * @param {string} firstName\n    * @param {string|null} [lastName]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n    * @param {string|null} [thumbUrl]\n    * @param {number|null} [thumbWidth]\n    * @param {number|null} [thumbHeight]\n   */\n   constructor(\n     type, \n     id, \n     phoneNumber, \n     firstName, \n     lastName, \n     replyMarkup, \n     inputMessageContent, \n     thumbUrl, \n     thumbWidth, \n     thumbHeight\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._phoneNumber = phoneNumber\n       this._firstName = firstName\n       this._lastName = lastName\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n       this._thumbUrl = thumbUrl\n       this._thumbWidth = thumbWidth\n       this._thumbHeight = thumbHeight\n   }\n\n   /**\n    * Type of the result, must be contact\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 Bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * Contact's phone number\n    * @returns {string}\n   */\n   get phoneNumber() {\n       return this._phoneNumber\n   }\n\n   /**\n    * Contact's first name\n    * @returns {string}\n   */\n   get firstName() {\n       return this._firstName\n   }\n\n   /**\n    * Contact's last name\n    * @returns {string|null}\n   */\n   get lastName() {\n       return this._lastName\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the contact\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    * Url of the thumbnail for the result\n    * @returns {string|null}\n   */\n   get thumbUrl() {\n       return this._thumbUrl\n   }\n\n   /**\n    * Thumbnail width\n    * @returns {number|null}\n   */\n   get thumbWidth() {\n       return this._thumbWidth\n   }\n\n   /**\n    * Thumbnail height\n    * @returns {number|null}\n   */\n   get thumbHeight() {\n       return this._thumbHeight\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultContact}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultContact(\n          raw['type'], \n          raw['id'], \n          raw['phone_number'], \n          raw['first_name'], \n          raw['last_name'] ? raw['last_name'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null, \n          raw['thumb_url'] ? raw['thumb_url'] : null, \n          raw['thumb_width'] ? raw['thumb_width'] : null, \n          raw['thumb_height'] ? raw['thumb_height'] : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          phone_number: this.phoneNumber ? this.phoneNumber : undefined, \n          first_name: this.firstName ? this.firstName : undefined, \n          last_name: this.lastName ? this.lastName : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined, \n          thumb_url: this.thumbUrl ? this.thumbUrl : undefined, \n          thumb_width: this.thumbWidth ? this.thumbWidth : undefined, \n          thumb_height: this.thumbHeight ? this.thumbHeight : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultContact","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultGame.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a Game.\n */\n\nclass InlineQueryResultGame extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} gameShortName\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n   */\n   constructor(type, id, gameShortName, replyMarkup) {\n       super()\n       this._type = type\n       this._id = id\n       this._gameShortName = gameShortName\n       this._replyMarkup = replyMarkup\n   }\n\n   /**\n    * Type of the result, must be game\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * Short name of the game\n    * @returns {string}\n   */\n   get gameShortName() {\n       return this._gameShortName\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultGame}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultGame(raw['type'], raw['id'], raw['game_short_name'], raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          game_short_name: this.gameShortName ? this.gameShortName : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultGame","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultCachedPhoto.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.\n */\n\nclass InlineQueryResultCachedPhoto extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} photoFileId\n    * @param {string|null} [title]\n    * @param {string|null} [description]\n    * @param {string|null} [caption]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n   */\n   constructor(\n     type, \n     id, \n     photoFileId, \n     title, \n     description, \n     caption, \n     replyMarkup, \n     inputMessageContent\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._photoFileId = photoFileId\n       this._title = title\n       this._description = description\n       this._caption = caption\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n   }\n\n   /**\n    * Type of the result, must be photo\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * A valid file identifier of the photo\n    * @returns {string}\n   */\n   get photoFileId() {\n       return this._photoFileId\n   }\n\n   /**\n    * Title for the result\n    * @returns {string|null}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Short description of the result\n    * @returns {string|null}\n   */\n   get description() {\n       return this._description\n   }\n\n   /**\n    * Caption of the photo to be sent, 0-200 characters\n    * @returns {string|null}\n   */\n   get caption() {\n       return this._caption\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the photo\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultCachedPhoto}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultCachedPhoto(\n          raw['type'], \n          raw['id'], \n          raw['photo_file_id'], \n          raw['title'] ? raw['title'] : null, \n          raw['description'] ? raw['description'] : null, \n          raw['caption'] ? raw['caption'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          photo_file_id: this.photoFileId ? this.photoFileId : undefined, \n          title: this.title ? this.title : undefined, \n          description: this.description ? this.description : undefined, \n          caption: this.caption ? this.caption : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultCachedPhoto","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultCachedGif.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with specified content instead of the animation.\n */\n\nclass InlineQueryResultCachedGif extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} gifFileId\n    * @param {string|null} [title]\n    * @param {string|null} [caption]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n   */\n   constructor(\n     type, \n     id, \n     gifFileId, \n     title, \n     caption, \n     replyMarkup, \n     inputMessageContent\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._gifFileId = gifFileId\n       this._title = title\n       this._caption = caption\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n   }\n\n   /**\n    * Type of the result, must be gif\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * A valid file identifier for the GIF file\n    * @returns {string}\n   */\n   get gifFileId() {\n       return this._gifFileId\n   }\n\n   /**\n    * Title for the result\n    * @returns {string|null}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Caption of the GIF file to be sent, 0-200 characters\n    * @returns {string|null}\n   */\n   get caption() {\n       return this._caption\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the GIF animation\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultCachedGif}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultCachedGif(\n          raw['type'], \n          raw['id'], \n          raw['gif_file_id'], \n          raw['title'] ? raw['title'] : null, \n          raw['caption'] ? raw['caption'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          gif_file_id: this.gifFileId ? this.gifFileId : undefined, \n          title: this.title ? this.title : undefined, \n          caption: this.caption ? this.caption : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultCachedGif","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultCachedMpeg4Gif.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.\n */\n\nclass InlineQueryResultCachedMpeg4Gif extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} mpeg4FileId\n    * @param {string|null} [title]\n    * @param {string|null} [caption]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n   */\n   constructor(\n     type, \n     id, \n     mpeg4FileId, \n     title, \n     caption, \n     replyMarkup, \n     inputMessageContent\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._mpeg4FileId = mpeg4FileId\n       this._title = title\n       this._caption = caption\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n   }\n\n   /**\n    * Type of the result, must be mpeg4_gif\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * A valid file identifier for the MP4 file\n    * @returns {string}\n   */\n   get mpeg4FileId() {\n       return this._mpeg4FileId\n   }\n\n   /**\n    * Title for the result\n    * @returns {string|null}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Caption of the MPEG-4 file to be sent, 0-200 characters\n    * @returns {string|null}\n   */\n   get caption() {\n       return this._caption\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the video animation\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultCachedMpeg4Gif}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultCachedMpeg4Gif(\n          raw['type'], \n          raw['id'], \n          raw['mpeg4_file_id'], \n          raw['title'] ? raw['title'] : null, \n          raw['caption'] ? raw['caption'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          mpeg4_file_id: this.mpeg4FileId ? this.mpeg4FileId : undefined, \n          title: this.title ? this.title : undefined, \n          caption: this.caption ? this.caption : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultCachedMpeg4Gif","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultCachedSticker.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the sticker.\n */\n\nclass InlineQueryResultCachedSticker extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} stickerFileId\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n   */\n   constructor(type, id, stickerFileId, replyMarkup, inputMessageContent) {\n       super()\n       this._type = type\n       this._id = id\n       this._stickerFileId = stickerFileId\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n   }\n\n   /**\n    * Type of the result, must be sticker\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * A valid file identifier of the sticker\n    * @returns {string}\n   */\n   get stickerFileId() {\n       return this._stickerFileId\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the sticker\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultCachedSticker}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultCachedSticker(\n          raw['type'], \n          raw['id'], \n          raw['sticker_file_id'], \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          sticker_file_id: this.stickerFileId ? this.stickerFileId : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultCachedSticker","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultCachedDocument.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file.\n */\n\nclass InlineQueryResultCachedDocument extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} title\n    * @param {string} documentFileId\n    * @param {string|null} [description]\n    * @param {string|null} [caption]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n   */\n   constructor(\n     type, \n     id, \n     title, \n     documentFileId, \n     description, \n     caption, \n     replyMarkup, \n     inputMessageContent\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._title = title\n       this._documentFileId = documentFileId\n       this._description = description\n       this._caption = caption\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n   }\n\n   /**\n    * Type of the result, must be document\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * Title for the result\n    * @returns {string}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * A valid file identifier for the file\n    * @returns {string}\n   */\n   get documentFileId() {\n       return this._documentFileId\n   }\n\n   /**\n    * Short description of the result\n    * @returns {string|null}\n   */\n   get description() {\n       return this._description\n   }\n\n   /**\n    * Caption of the document to be sent, 0-200 characters\n    * @returns {string|null}\n   */\n   get caption() {\n       return this._caption\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the file\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultCachedDocument}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultCachedDocument(\n          raw['type'], \n          raw['id'], \n          raw['title'], \n          raw['document_file_id'], \n          raw['description'] ? raw['description'] : null, \n          raw['caption'] ? raw['caption'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          title: this.title ? this.title : undefined, \n          document_file_id: this.documentFileId ? this.documentFileId : undefined, \n          description: this.description ? this.description : undefined, \n          caption: this.caption ? this.caption : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultCachedDocument","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultCachedVideo.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.\n */\n\nclass InlineQueryResultCachedVideo extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} videoFileId\n    * @param {string} title\n    * @param {string|null} [description]\n    * @param {string|null} [caption]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n   */\n   constructor(\n     type, \n     id, \n     videoFileId, \n     title, \n     description, \n     caption, \n     replyMarkup, \n     inputMessageContent\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._videoFileId = videoFileId\n       this._title = title\n       this._description = description\n       this._caption = caption\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n   }\n\n   /**\n    * Type of the result, must be video\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * A valid file identifier for the video file\n    * @returns {string}\n   */\n   get videoFileId() {\n       return this._videoFileId\n   }\n\n   /**\n    * Title for the result\n    * @returns {string}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Short description of the result\n    * @returns {string|null}\n   */\n   get description() {\n       return this._description\n   }\n\n   /**\n    * Caption of the video to be sent, 0-200 characters\n    * @returns {string|null}\n   */\n   get caption() {\n       return this._caption\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the video\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultCachedVideo}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultCachedVideo(\n          raw['type'], \n          raw['id'], \n          raw['video_file_id'], \n          raw['title'], \n          raw['description'] ? raw['description'] : null, \n          raw['caption'] ? raw['caption'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          video_file_id: this.videoFileId ? this.videoFileId : undefined, \n          title: this.title ? this.title : undefined, \n          description: this.description ? this.description : undefined, \n          caption: this.caption ? this.caption : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultCachedVideo","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultCachedVoice.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the voice message.\n */\n\nclass InlineQueryResultCachedVoice extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} voiceFileId\n    * @param {string} title\n    * @param {string|null} [caption]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n   */\n   constructor(\n     type, \n     id, \n     voiceFileId, \n     title, \n     caption, \n     replyMarkup, \n     inputMessageContent\n   ) {\n       super()\n       this._type = type\n       this._id = id\n       this._voiceFileId = voiceFileId\n       this._title = title\n       this._caption = caption\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n   }\n\n   /**\n    * Type of the result, must be voice\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * A valid file identifier for the voice message\n    * @returns {string}\n   */\n   get voiceFileId() {\n       return this._voiceFileId\n   }\n\n   /**\n    * Voice message title\n    * @returns {string}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Caption, 0-200 characters\n    * @returns {string|null}\n   */\n   get caption() {\n       return this._caption\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the voice message\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultCachedVoice}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultCachedVoice(\n          raw['type'], \n          raw['id'], \n          raw['voice_file_id'], \n          raw['title'], \n          raw['caption'] ? raw['caption'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          voice_file_id: this.voiceFileId ? this.voiceFileId : undefined, \n          title: this.title ? this.title : undefined, \n          caption: this.caption ? this.caption : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultCachedVoice","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InlineQueryResultCachedAudio.js":"'use strict'\n\nconst InlineKeyboardMarkup = require('./InlineKeyboardMarkup')\nconst InputMessageContent = require('./InputMessageContent')\nconst InlineQueryResult = require('./InlineQueryResult')\n/**\n * Represents a link to an mp3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.\n */\n\nclass InlineQueryResultCachedAudio extends InlineQueryResult {\n   /**\n    *\n    * @param {string} type\n    * @param {string} id\n    * @param {string} audioFileId\n    * @param {string|null} [caption]\n    * @param {InlineKeyboardMarkup|null} [replyMarkup]\n    * @param {InputMessageContent|null} [inputMessageContent]\n   */\n   constructor(type, id, audioFileId, caption, replyMarkup, inputMessageContent) {\n       super()\n       this._type = type\n       this._id = id\n       this._audioFileId = audioFileId\n       this._caption = caption\n       this._replyMarkup = replyMarkup\n       this._inputMessageContent = inputMessageContent\n   }\n\n   /**\n    * Type of the result, must be audio\n    * @returns {string}\n   */\n   get type() {\n       return this._type\n   }\n\n   /**\n    * Unique identifier for this result, 1-64 bytes\n    * @returns {string}\n   */\n   get id() {\n       return this._id\n   }\n\n   /**\n    * A valid file identifier for the audio file\n    * @returns {string}\n   */\n   get audioFileId() {\n       return this._audioFileId\n   }\n\n   /**\n    * Caption, 0-200 characters\n    * @returns {string|null}\n   */\n   get caption() {\n       return this._caption\n   }\n\n   /**\n    * Inline keyboard attached to the message\n    * @returns {InlineKeyboardMarkup|null}\n   */\n   get replyMarkup() {\n       return this._replyMarkup\n   }\n\n   /**\n    * Content of the message to be sent instead of the audio\n    * @returns {InputMessageContent|null}\n   */\n   get inputMessageContent() {\n       return this._inputMessageContent\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InlineQueryResultCachedAudio}\n    */\n   static deserialize(raw) {\n      return new InlineQueryResultCachedAudio(\n          raw['type'], \n          raw['id'], \n          raw['audio_file_id'], \n          raw['caption'] ? raw['caption'] : null, \n          raw['reply_markup'] ? InlineKeyboardMarkup.deserialize(raw['reply_markup']) : null, \n          raw['input_message_content'] ? InputMessageContent.deserialize(raw['input_message_content']) : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          type: this.type ? this.type : undefined, \n          id: this.id ? this.id : undefined, \n          audio_file_id: this.audioFileId ? this.audioFileId : undefined, \n          caption: this.caption ? this.caption : undefined, \n          reply_markup: this.replyMarkup ? this.replyMarkup.serialize() : undefined, \n          input_message_content: this.inputMessageContent ? this.inputMessageContent.serialize() : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InlineQueryResultCachedAudio","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InputTextMessageContent.js":"'use strict'\n\nconst InputMessageContent = require('./InputMessageContent')\n/**\n * Represents the content of a text message to be sent as the result of an inline query. \n */\n\nclass InputTextMessageContent extends InputMessageContent {\n   /**\n    *\n    * @param {string} messageText\n    * @param {string|null} [parseMode]\n    * @param {boolean|null} [disableWebPagePreview]\n   */\n   constructor(messageText, parseMode, disableWebPagePreview) {\n       super()\n       this._messageText = messageText\n       this._parseMode = parseMode\n       this._disableWebPagePreview = disableWebPagePreview\n   }\n\n   /**\n    * Text of the message to be sent, 1-4096 characters\n    * @returns {string}\n   */\n   get messageText() {\n       return this._messageText\n   }\n\n   /**\n    * Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message.\n    * @returns {string|null}\n   */\n   get parseMode() {\n       return this._parseMode\n   }\n\n   /**\n    * Disables link previews for links in the sent message\n    * @returns {boolean|null}\n   */\n   get disableWebPagePreview() {\n       return this._disableWebPagePreview\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InputTextMessageContent}\n    */\n   static deserialize(raw) {\n      return new InputTextMessageContent(raw['message_text'], raw['parse_mode'] ? raw['parse_mode'] : null, raw['disable_web_page_preview'] ? raw['disable_web_page_preview'] : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          message_text: this.messageText ? this.messageText : undefined, \n          parse_mode: this.parseMode ? this.parseMode : undefined, \n          disable_web_page_preview: this.disableWebPagePreview ? this.disableWebPagePreview : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InputTextMessageContent","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InputLocationMessageContent.js":"'use strict'\n\nconst InputMessageContent = require('./InputMessageContent')\n/**\n * Represents the content of a location message to be sent as the result of an inline query. \n */\n\nclass InputLocationMessageContent extends InputMessageContent {\n   /**\n    *\n    * @param {number} latitude\n    * @param {number} longitude\n   */\n   constructor(latitude, longitude) {\n       super()\n       this._latitude = latitude\n       this._longitude = longitude\n   }\n\n   /**\n    * Latitude of the location in degrees\n    * @returns {number}\n   */\n   get latitude() {\n       return this._latitude\n   }\n\n   /**\n    * Longitude of the location in degrees\n    * @returns {number}\n   */\n   get longitude() {\n       return this._longitude\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InputLocationMessageContent}\n    */\n   static deserialize(raw) {\n      return new InputLocationMessageContent(raw['latitude'], raw['longitude'])\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          latitude: this.latitude ? this.latitude : undefined, \n          longitude: this.longitude ? this.longitude : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InputLocationMessageContent","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InputVenueMessageContent.js":"'use strict'\n\nconst InputMessageContent = require('./InputMessageContent')\n/**\n * Represents the content of a venue message to be sent as the result of an inline query. \n */\n\nclass InputVenueMessageContent extends InputMessageContent {\n   /**\n    *\n    * @param {number} latitude\n    * @param {number} longitude\n    * @param {string} title\n    * @param {string} address\n    * @param {string|null} [foursquareId]\n   */\n   constructor(latitude, longitude, title, address, foursquareId) {\n       super()\n       this._latitude = latitude\n       this._longitude = longitude\n       this._title = title\n       this._address = address\n       this._foursquareId = foursquareId\n   }\n\n   /**\n    * Latitude of the venue in degrees\n    * @returns {number}\n   */\n   get latitude() {\n       return this._latitude\n   }\n\n   /**\n    * Longitude of the venue in degrees\n    * @returns {number}\n   */\n   get longitude() {\n       return this._longitude\n   }\n\n   /**\n    * Name of the venue\n    * @returns {string}\n   */\n   get title() {\n       return this._title\n   }\n\n   /**\n    * Address of the venue\n    * @returns {string}\n   */\n   get address() {\n       return this._address\n   }\n\n   /**\n    * Foursquare identifier of the venue, if known\n    * @returns {string|null}\n   */\n   get foursquareId() {\n       return this._foursquareId\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InputVenueMessageContent}\n    */\n   static deserialize(raw) {\n      return new InputVenueMessageContent(\n          raw['latitude'], \n          raw['longitude'], \n          raw['title'], \n          raw['address'], \n          raw['foursquare_id'] ? raw['foursquare_id'] : null\n      )\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          latitude: this.latitude ? this.latitude : undefined, \n          longitude: this.longitude ? this.longitude : undefined, \n          title: this.title ? this.title : undefined, \n          address: this.address ? this.address : undefined, \n          foursquare_id: this.foursquareId ? this.foursquareId : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InputVenueMessageContent","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/InputContactMessageContent.js":"'use strict'\n\nconst InputMessageContent = require('./InputMessageContent')\n/**\n * Represents the content of a contact message to be sent as the result of an inline query. \n */\n\nclass InputContactMessageContent extends InputMessageContent {\n   /**\n    *\n    * @param {string} phoneNumber\n    * @param {string} firstName\n    * @param {string|null} [lastName]\n   */\n   constructor(phoneNumber, firstName, lastName) {\n       super()\n       this._phoneNumber = phoneNumber\n       this._firstName = firstName\n       this._lastName = lastName\n   }\n\n   /**\n    * Contact's phone number\n    * @returns {string}\n   */\n   get phoneNumber() {\n       return this._phoneNumber\n   }\n\n   /**\n    * Contact's first name\n    * @returns {string}\n   */\n   get firstName() {\n       return this._firstName\n   }\n\n   /**\n    * Contact's last name\n    * @returns {string|null}\n   */\n   get lastName() {\n       return this._lastName\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {InputContactMessageContent}\n    */\n   static deserialize(raw) {\n      return new InputContactMessageContent(raw['phone_number'], raw['first_name'], raw['last_name'] ? raw['last_name'] : null)\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          phone_number: this.phoneNumber ? this.phoneNumber : undefined, \n          first_name: this.firstName ? this.firstName : undefined, \n          last_name: this.lastName ? this.lastName : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = InputContactMessageContent","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/models/GameHighScore.js":"'use strict'\n\nconst User = require('./User')\n\n/**\n * This object represents one row of the high scores table for a game.\n */\n\nclass GameHighScore {\n   /**\n    *\n    * @param {number} position\n    * @param {User} user\n    * @param {number} score\n   */\n   constructor(position, user, score) {\n       this._position = position\n       this._user = user\n       this._score = score\n   }\n\n   /**\n    * Position in high score table for the game\n    * @returns {number}\n   */\n   get position() {\n       return this._position\n   }\n\n   /**\n    * User\n    * @returns {User}\n   */\n   get user() {\n       return this._user\n   }\n\n   /**\n    * Score\n    * @returns {number}\n   */\n   get score() {\n       return this._score\n   }\n\n   /**\n    *\n    * @param {Object} raw\n    * @returns {GameHighScore}\n    */\n   static deserialize(raw) {\n      return new GameHighScore(raw['position'], raw['user'] ? User.deserialize(raw['user']) : null, raw['score'])\n   }\n\n   /**\n    *\n    * @returns {Object}\n    */\n   serialize() {\n      return { \n          position: this.position ? this.position : undefined, \n          user: this.user ? this.user.serialize() : undefined, \n          score: this.score ? this.score : undefined\n      }\n   }\n\n   /**\n    *\n    * @returns {string}\n    */\n   toJSON() {\n      return this.serialize()\n   }\n}\n\nmodule.exports = GameHighScore","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/api/InputFile.js":"'use strict'\n\nconst fs = require(\"fs\")\nconst req = require('tiny_request')\nconst path = require('path')\n\nconst STANDARD_TYPES = {\n    photo: {\n        filename: 'photo.png',\n        type: 'image/png'\n    },\n    audio: {\n        filename: 'audio.mp3',\n        type: 'audio/mpeg'\n    },\n    document: {\n        filename: 'data.dat',\n        type: ''\n    },\n    sticker: {\n        filename: 'sticker.webp',\n        type: ''\n    },\n    video: {\n        filename: 'video.mp4',\n        type: 'audio/mp4'\n    }\n}\n\nlet dir = __dirname + '/temp/'\n\nif (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir)\n}\n\n/**\n * This class represents any file that's going be send to Telegram\n */\nclass InputFile {\n    /**\n     * @param {string|null} fileId\n     * @param {string|null} filePath\n     * @param {string|null} fileUrl\n     * @param {string|null} fileName\n     * @private\n     */\n    constructor(fileId, filePath, fileUrl, fileName) {\n        this._fileId = fileId\n        this._filePath = filePath\n        this._fileUrl = fileUrl\n        this._fileName = fileName\n    }\n\n    /**\n     *\n     * @param {string} type\n     * @param {Object} params\n     * @returns {Promise<Object>}\n     */\n    prepareRequest(type, params) {\n        return new Promise((resolve) => {\n            if (this._fileId) {\n                params[type] = this._fileId\n\n                resolve({ params: params, multipart: null })\n            }\n\n            if (this._fileUrl) {\n                const filePath = __dirname + '/temp/' + Math.random().toString(36).substring(7) + '.dat'\n                const wstream = fs.createWriteStream(filePath)\n\n                const sendedCallback = () => {\n                    fs.unlink(filePath)\n                }\n\n                wstream.on('finish', () => {\n                    const multipart = { }\n\n                    multipart[type] = {\n                        value: fs.createReadStream(filePath),\n                        filename: this._fileName || STANDARD_TYPES[type].filename,\n                        contentType: STANDARD_TYPES[type].type\n                    }\n\n                    resolve({ params: params, multipart: multipart, callback: sendedCallback})\n                })\n\n                req.get({\n                    url: this._fileUrl,\n                    pipe: wstream\n                })\n            }\n\n            if (this._filePath) {\n                const multipart = { }\n\n                multipart[type] = {\n                    value: fs.createReadStream(this._filePath),\n                    filename: path.basename(this._filePath) || STANDARD_TYPES[type].filename,\n                    contentType: STANDARD_TYPES[type].type\n                }\n\n                resolve({ params: params, multipart: multipart })\n            }\n        })\n    }\n\n    /**\n     * Creates InputFile from plain Object\n     *\n     * @param {Object|string} raw\n     * @returns {InputFile}\n     */\n    static deserialize(raw) {\n        if (typeof raw == 'string') {\n            return InputFile.byId(raw)\n        }\n\n        if (raw.url) {\n            return InputFile.byUrl(raw.url, raw.filename)\n        }\n\n        if (raw.path) {\n            return InputFile.byFilePath(raw.path)\n        }\n    }\n\n    /**\n     * Creates InputFile by file id\n     *\n     * @param {string} id\n     * @returns {InputFile}\n     */\n    static byId(id) {\n        return new InputFile(id, null, null, null)\n    }\n\n    /**\n     * Creates InputFile by file path\n     *\n     * @param {string} path\n     * @returns {InputFile}\n     */\n    static byFilePath(path) {\n        return new InputFile(null, path, null, null)\n    }\n\n    /**\n     * Creates InputFile by url\n     *\n     * @param {string} url\n     * @param {string} [fileName]\n     * @returns {InputFile}\n     */\n    static byUrl(url, fileName) {\n        return new InputFile(null, null, url, fileName)\n    }\n}\n\nmodule.exports = InputFile","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/api/TelegramApiError.js":"'use strict'\n\n/**\n *  TelegramApiError\n */\nclass TelegramApiError {\n    /**\n     *\n     * @param {number} code\n     * @param {string} description\n     */\n    constructor(code, description) {\n        this._code = code\n        this._description = description\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    get code() {\n        return this._code\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    get description() {\n        return this._description\n    }\n\n    /**\n     *\n     * @param {Object} raw\n     * @returns {TelegramApiError}\n     */\n    static fromResponse(raw) {\n        return new TelegramApiError(raw.error_code, raw.description)\n    }\n}\n\nmodule.exports = TelegramApiError","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/routing/TelegramRouter.js":"'use strict'\n\nconst TelegramRoute = require('./TelegramRoute')\nconst AnyCommand = require('./commands/AnyCommand')\n\nclass TelegramRouter {\n    constructor() {\n        /**\n         * @type {TelegramRoute[]}\n         * @private\n         */\n        this._routes = []\n\n        /**\n         * @type {TelegramBaseController}\n         * @private\n         */\n        this._otherwiseController = null\n\n        this._callbackQueryController = null\n        this._inlineQueryController = null\n    }\n\n\n    /**\n     * You can pass your command pattern or array of patterns\n     * and some child of TelegramBaseController\n     *\n     * After that any update that satisfies your command\n     * will be passed to your controller\n     *\n     * @param {BaseCommand|BaseCommand[]} commands\n     * @param {TelegramBaseController} controller\n     * @returns {TelegramRouter}\n     */\n    when(commands, controller) {\n        this._routes.push(new TelegramRoute(commands, controller))\n\n        return this\n    }\n\n    /**\n     * This child of TelegramBaseController will be called for all updates\n     *\n     * @param {TelegramBaseController} controller\n     * @returns {TelegramRouter}\n     */\n    any(controller) {\n        this._routes.push(new TelegramRoute(new AnyCommand(), controller))\n\n        return this\n    }\n\n    /**\n     * This child of TelegramBaseController will be called\n     * if there is no controller for that update (except controller passed to 'any' method)\n     *\n     * @param {TelegramBaseController} controller\n     * @returns {TelegramRouter}\n     */\n    otherwise(controller) {\n        this._otherwiseController = controller\n\n        return this\n    }\n\n\n    /**\n     * This child of TelegramBaseCallbackQueryController will be called for all callback queries\n     *\n     * @param {TelegramBaseCallbackQueryController} controller\n     */\n    callbackQuery(controller) {\n        this._callbackQueryController = controller\n        return this\n    }\n\n    /**\n     * This child of TelegramBaseCallbackQueryController will be called for all inline queries\n     *\n     * @param {TelegramBaseInlineQueryController} controller\n     * @returns {TelegramRouter}\n     */\n    inlineQuery(controller) {\n        this._inlineQueryController = controller\n        return this\n    }\n\n    /**\n     *\n     * @returns {TelegramBaseCallbackQueryController|null}\n     */\n    get callbackQueryController() {\n        return this._callbackQueryController\n    }\n\n    /**\n     *\n     * @returns {TelegramBaseInlineQueryController|null}\n     */\n    get inlineQueryController() {\n        return this._inlineQueryController\n    }\n\n    /**\n     * @param {Scope} scope\n     * @returns { { controller: TelegramBaseController, handler: string }[] }\n     */\n    controllersForScope(scope) {\n        let controllers = []\n\n        this._routes.forEach(route => {\n            let command = route.test(scope)\n\n            if (command !== false) {\n                let controllerRoutes = route.controller.routes\n                let controllerHandler\n\n                if (controllerRoutes && controllerRoutes[command.handlerName]) {\n                    controllerHandler = controllerRoutes[command.handlerName]\n                }\n                else {\n                    controllerHandler = 'handle'\n                }\n\n                controllers.push({\n                    controller: route.controller,\n                    handler: controllerHandler\n                })\n            }\n        })\n\n        if (controllers.length === 0 && this._otherwiseController !== null) {\n            controllers.push({ controller: this._otherwiseController, handler: 'handle'})\n        }\n\n        return controllers\n    }\n}\n\nmodule.exports = TelegramRouter\n","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/routing/TelegramRoute.js":"'use strict'\n\nclass TelegramRoute {\n    /**\n     * @param {BaseCommand|BaseCommand[]} commands\n     * @param {TelegramBaseController} controller\n     */\n    constructor(commands, controller) {\n        this._commands = Array.isArray(commands) ? commands : [commands]\n        this._controller = controller\n    }\n\n    /**\n     * @returns {BaseCommand[]}\n     */\n    get commands() {\n        return this._commands\n    }\n\n    /**\n     * @returns {TelegramBaseController}\n     */\n    get controller() {\n        return this._controller\n    }\n\n    /**\n     * @param {Scope} scope\n     * @returns {boolean|BaseCommand}\n     */\n    test(scope) {\n        for (let command of this._commands) {\n            if (command.test(scope) == true) {\n                return command\n            }\n        }\n\n        return false\n    }\n}\n\nmodule.exports = TelegramRoute","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/routing/commands/AnyCommand.js":"'use strict'\n\nconst BaseCommand = require('./BaseCommand')\n\nclass AnyCommand {\n    /**\n     * @param {Scope} scope\n     * @returns {boolean}\n     */\n    test(scope) {\n        return true\n    }\n\n    /**\n     * @returns {string}\n     */\n    get handlerName() {\n        return 'handle'\n    }\n}\n\nmodule.exports = AnyCommand","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/routing/commands/BaseCommand.js":"'use strict'\n\nclass BaseCommand {\n    /**\n     * Tests message\n     *\n     * @param {Scope} scope\n     * @returns {boolean}\n     */\n    test(scope) {\n        throw 'Not implemented'\n    }\n\n    /**\n     * Returns handler method name in controller\n     *\n     * @returns {string}\n     */\n    get handlerName() { throw 'Not implemented' }\n}\n\n\nmodule.exports = BaseCommand","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/logger/ConsoleLogger.js":"'use strict'\n\nconst BaseLogger = require('./BaseLogger')\n\nconst COLOR_CODES = {\n    red: '\\x1b[31m',\n    cyan: '\\x1b[36m',\n    yellow: '\\x1b[33m',\n    reset: '\\x1b[0m'\n}\n\n/**\n * Standard ConsoleLogger, will be used if no logger passed to Telegram\n */\nclass ConsoleLogger extends BaseLogger {\n    /**\n     *\n     * @param {Object} data\n     */\n    log(data) {\n        this._prepareLog('cyan', 'log', data)\n    }\n\n    /**\n     *\n     * @param {Object} data\n     */\n    warn(data) {\n        this._prepareLog('yellow', 'warn', data)\n    }\n\n    /**\n     *\n     * @param {Object} data\n     */\n    error(data) {\n        this._prepareLog('red', 'error', data)\n    }\n\n    /**\n     *\n     * @param {string} color\n     * @param {string} prefix\n     * @param {Object} data\n     * @private\n     */\n    _prepareLog(color, prefix, data) {\n        Object.keys(data).forEach(key => {\n            if (data[key] instanceof Error) {\n                data[key] = data[key].stack || data[key]\n            }\n        })\n\n        console.log(`${COLOR_CODES[color]}[${prefix}]   ${COLOR_CODES.reset}`)\n        Object.keys(data).forEach(key => console.log(key, data[key]))\n        console.log('\\n')\n    }\n}\n\nmodule.exports = ConsoleLogger","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/logger/BaseLogger.js":"'use strict'\n\n/**\n * Represents any logger class \n * \n * if you want to create your own logger, you must extend BaseLogger \n * and override all methods\n */\nclass BaseLogger {\n    /**\n     * Any log\n     * \n     * @param {Object} data\n     */\n    log(data) { throw 'Not implemented' }\n\n    /**\n     * Warning log\n     * \n     * @param {Object} data\n     */\n    warn(data) { throw 'Not implemented' }\n\n    /**\n     * Error log\n     * \n     * @param {Object} data\n     */\n    error(data) { throw 'Not implemented' }\n}\n\nmodule.exports = BaseLogger","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/TelegramDataSource.js":"'use strict'\n\nconst BaseTelegramDataSource = require('./BaseTelegramDataSource')\n\nclass TelegramDataSource extends BaseTelegramDataSource {\n    /**\n     *\n     * @param {TelegramApi} api\n     * @param {TelegramRouter} router\n     * @param {BaseLogger} logger\n     * @param {TelegramSessionStorage} sessionStorage\n     * @param {Ivan} localization\n     * @param {TelegramIPC} ipc\n     */\n    constructor(api, router, logger, sessionStorage, localization, ipc) {\n        super()\n        \n        this._api = api\n        this._router = router\n        this._logger = logger\n        this._scopeExtensions = []\n        this._sessionStorage = sessionStorage\n        this._localization = localization\n        this._ipc = ipc\n    }\n\n    /**\n     *\n     * @returns {TelegramApi}\n     */\n    get api() {\n        return this._api\n    }\n\n    /**\n     *\n     * @returns {TelegramRouter}\n     */\n    get router() {\n        return this._router\n    }\n\n    /**\n     *\n     * @returns {BaseLogger}\n     */\n    get logger() {\n        return this._logger\n    }\n\n    /**\n     *\n     * @returns {BaseScopeExtension[]}\n     */\n    get scopeExtensions() {\n        return this._scopeExtensions\n    }\n\n    /**\n     *\n     * @returns {TelegramSessionStorage}\n     */\n    get sessionStorage() {\n        return this._sessionStorage\n    }\n\n    /**\n     *\n     * @returns {Ivan}\n     */\n    get localization() {\n        return this._localization\n    }\n\n    /**\n     * @returns {TelegramIPC}\n     */\n    get ipc() {\n        return this._ipc\n    }\n\n    /**\n     *\n     * @param {BaseScopeExtension|BaseScopeExtension[]} extension\n     */\n    addScopeExtension(extension) {\n        if (Array.isArray(extension)) {\n            extension.forEach(this._scopeExtensions.push)\n\n            return\n        }\n\n        this._scopeExtensions.push(extension)\n    }\n}\n\nmodule.exports = TelegramDataSource","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/BaseTelegramDataSource.js":"'use strict'\n\nclass BaseTelegramDataSource {\n    /**\n     * @returns {TelegramApi}\n     */\n    get api() { throw 'Not implemented' }\n\n    /**\n     * @returns {TelegramRouter}\n     */\n    get router() { throw 'Not implemented' }\n\n    /**\n     * @returns {BaseLogger}\n     */\n    get logger() { throw 'Not implemented' }\n\n    /**\n     * @returns {BaseScopeExtension[]}\n     */\n    get scopeExtensions() { throw 'Not implemented' }\n\n    /**\n     * @returns {TelegramSessionStorage}\n     */\n    get sessionStorage() { throw 'Not implemented' }\n\n    /**\n     * @returns {Ivan}\n     */\n    get localization() { throw 'Not implemented' }\n\n    /**\n     * @returns {TelegramIPC}\n     */\n    get ipc() { throw 'Not implemented' }\n}\n\nmodule.exports = BaseTelegramDataSource","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/updateProcessors/UpdateProcessorsManager.js":"'use strict'\n\nconst BaseUpdateProcessor = require('./BaseUpdateProcessor')\nconst MessageUpdateProcessor = require('./MessageUpdateProcessor')\nconst InlineQueryUpdateProcessor = require('./InlineQueryUpdateProcessor')\n\nclass UpdateProcessorsManager extends BaseUpdateProcessor {\n    /**\n     *\n     * @param {BaseTelegramDataSource} delegate\n     */\n    constructor(delegate) {\n        super(delegate)\n\n        /**\n         *\n         * @type {BaseUpdateProcessor[]}\n         * @private\n         */\n        this._processors = [\n            new MessageUpdateProcessor(this._dataSource),\n            new InlineQueryUpdateProcessor(this._dataSource)\n        ]\n    }\n\n    /**\n     *\n     * @param {Update} update\n     */\n    process(update) {\n        const processor = this._processorForUpdate(update)\n\n        if (processor) {\n            processor.process(update)\n        }\n    }\n\n    /**\n     * \n     * @param update\n     * @returns {boolean}\n     */\n    supports(update) {\n        return true\n    }\n\n    /**\n     *\n     * @param {Update} update\n     * @returns {BaseUpdateProcessor}\n     * @private\n     */\n    _processorForUpdate(update) {\n        for (const processor of this._processors) {\n            if (processor.supports(update)) {\n                return processor\n            }\n        }\n\n        this._dataSource.logger.error({ 'No processor found for update:': update })\n    }\n}\n\nmodule.exports = UpdateProcessorsManager","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/updateProcessors/BaseUpdateProcessor.js":"'use strict'\n\nclass BaseUpdateProcessor {\n    /**\n     *\n     * @param {BaseTelegramDataSource} delegate\n     */\n    constructor(dataSource) {\n        /**\n         * @var {BaseTelegramDataSource} this._dataSource\n         */\n        this._dataSource = dataSource\n    }\n\n    /**\n     *\n     * @param {Update} update\n     */\n    process(update) { throw 'Not implemented' }\n\n    /**\n     *\n     * @param {Update} update\n     * @returns {boolean}\n     */\n    supports(update) { throw 'Not implemented' }\n}\n\nmodule.exports = BaseUpdateProcessor","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/updateProcessors/MessageUpdateProcessor.js":"'use strict'\n\nconst BaseUpdateProcessor = require('./BaseUpdateProcessor')\nconst Scope = require('../mvc/Scope')\nconst TelegramSession = require('../storage/session/TelegramSession')\n\nclass MessageUpdateProcessor extends BaseUpdateProcessor {\n    /**\n     *\n     * @param {BaseTelegramDataSource} dataSource\n     */\n    constructor(dataSource) {\n        super(dataSource)\n\n        this._waitingRequests = {}\n        this._waitingCallbackQueries = {}\n    }\n\n    /**\n     *\n     * @param {Update} update\n     */\n    process(update) {\n        if (update.message || update.editedMessage) {\n            let message = update.message || update.editedMessage\n\n            let scope = new Scope(\n                update,\n                this._dataSource.api,\n                this._dataSource.scopeExtensions,\n                this._waitingRequests,\n                this._waitingCallbackQueries,\n                this._dataSource.logger,\n                this._dataSource.sessionStorage,\n                chatId => this._waitForUpdate(chatId),\n                data => this._waitForCallback(data)\n            )\n\n            const chatId = message.chat.id\n\n            if (this._waitingRequests[chatId] && this._waitingRequests[chatId] !== null) {\n                const callback = this._waitingRequests[chatId]\n                callback(scope)\n\n                if (this._waitingRequests[chatId] == callback) this._waitingRequests[chatId] = null\n                scope = null\n\n                return\n            }\n            const controllers = this._dataSource.router.controllersForScope(scope)\n\n            controllers.forEach(controller => {\n                controller.controller.api = this._dataSource.api\n                controller.controller.localization = this._dataSource.localization\n\n                try {\n                    controller.controller[controller.handler](controller.controller.before(scope))\n                }\n                catch (e) {\n                    this._dataSource.logger.error({\n                        'error': e,\n                        'in controller': controller,\n                        'for update': update\n                    })\n                }\n            })\n\n            if (controllers.length === 0) {\n                this._dataSource.logger.warn({\n                    'Cant find controller for update': update\n                })\n            }\n\n            scope = null\n\n            return\n        }\n\n        if (update.callbackQuery) {\n            if (this._waitingCallbackQueries[update.callbackQuery.data]) {\n                this._waitingCallbackQueries[update.callbackQuery.data](update.callbackQuery)\n\n                return\n            }\n\n            if (this._dataSource.router.callbackQueryController) {\n                try {\n                    this._dataSource.router.callbackQueryController.handle(update.callbackQuery)\n                }\n                catch (e) {\n                    this._dataSource.logger.error({\n                        'error': e,\n                        'in controller': this._dataSource.router.callbackQueryController,\n                        'for update': update\n                    })\n                }\n            }\n\n            return\n        }\n\n        this._dataSource.logger.warn({ 'Update was not handled': update })\n    }\n\n    /**\n     *\n     * @param {Update} update\n     */\n    supports(update) {\n        return !!(update.message || update.editedMessage || update.callbackQuery)\n    }\n\n    /**\n     * @param {number} chatId\n     * @private\n     */\n    _waitForUpdate(chatId) {\n        this._dataSource.ipc.askForNextUpdate(chatId)\n    }\n\n    /**\n     * @param {string} data\n     * @private\n     */\n    _waitForCallback(data) {\n        this._dataSource.ipc.askForNextCallbackQuery(data)\n    }\n}\n\nmodule.exports = MessageUpdateProcessor","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/mvc/Scope.js":"'use strict'\n\nconst InlineKeyboardButton = require('../models/InlineKeyboardButton')\nconst InlineKeyboardMarkup = require('../models/InlineKeyboardMarkup')\nconst ReplyKeyboardMarkup = require('../models/ReplyKeyboardMarkup')\nconst KeyboardButton = require('../models/KeyboardButton')\n\nclass Scope {\n    /**\n     *\n     * @param {Update} update\n     * @param {TelegramApi} api\n     * @param {BaseScopeExtension[]} extensions\n     * @param {Function[]} waitingRequests\n     * @param {Object} waitingCallbackQueries\n     * @param {BaseLogger} logger\n     * @param {Function} processUpdate\n     * @param {TelegramSessionStorage} sessionStorage\n     * @param {Function} waitForUpdate\n     * @param {Function} waitForCallback\n     */\n    constructor(\n        update,\n        api,\n        extensions,\n        waitingRequests,\n        waitingCallbackQueries,\n        logger,\n        sessionStorage,\n        waitForUpdate,\n        waitForCallback\n    ) {\n        this._api = api\n        this._update = update\n        /**\n         * \n         * @type {BaseScopeExtension[]}\n         * @private\n         */\n        this._extensions = extensions\n        this._waitingRequests = waitingRequests\n        this._waitingCallbackQueries = waitingCallbackQueries\n\n        this._isEditedMessage = update.editedMessage ? true : false\n\n        this._message = update.message || update.editedMessage\n        this._chatId = this._message.chat.id\n        this._userId = this._message.from.id\n        this._fromGroupChat = !(this._userId === this._chatId)\n\n        this._logger = logger\n        this._sessionStorage = sessionStorage\n        this._waitForUpdate = waitForUpdate\n        this._waitForCallback = waitForCallback\n\n        this._extensions.forEach(extension => {\n            const extensionInstance = new extension(this)\n            this[extensionInstance.name] = extensionInstance.process\n        })\n    }\n\n    /**\n     * @returns {TelegramSessionStorage}\n     */\n    get sessionStorage() {\n        return this._sessionStorage\n    }\n\n    /**\n     * @returns {BaseStorage}\n     */\n    get storage() {\n        return this._sessionStorage\n    }\n\n    /**\n     *\n     * @returns {Update}\n     */\n    get update() {\n        return this._update\n    }\n\n    /**\n     *\n     * @returns {Message}\n     */\n    get message() {\n        return this._message\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    get chatId() {\n        return this._chatId\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    get userId() {\n        return this._userId\n    }\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    get idFromGroupChat() {\n        return this._fromGroupChat\n    }\n\n    /**\n     *\n     * @returns {TelegramApi}\n     */\n    get api() {\n        return this._api\n    }\n\n    /**\n     * @param {string} key\n     * @returns {Promise.<*>}\n     */\n    getUserSession(key) {\n        return this._sessionStorage.getUserSession(this.userId, key)\n    }\n\n    /**\n     * @param {string} key\n     * @param {*} value\n     * @returns {Promise}\n     */\n    setUserSession(key, value) {\n        return this._sessionStorage.setUserSession(this.userId, key, value)\n    }\n\n    /**\n     * @param {string} key\n     * @returns {Promise.<*>}\n     */\n    getChatSession(key) {\n        return this._sessionStorage.getChatSession(this.chatId, key)\n    }\n\n    /**\n     * @param {string} key\n     * @param {*} value\n     * @returns {Promise}\n     */\n    setChatSession(key, value) {\n        return this._sessionStorage.setChatSession(this.chatId, key, value)\n    }\n\n    /**\n     *\n     * @returns {BaseLogger}\n     */\n    get logger() {\n        return this._logger\n    }\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    get isEditedMessage() {\n        return this._isEditedMessage\n    }\n\n    /**\n     * After calling this the next update\n     * from current user will be passed to promise\n     *\n     * @returns {Promise<Scope>}\n     */\n    get waitForRequest() {\n        return new Promise(resolve => {\n            this._waitingRequests[this.chatId] = resolve\n            this._waitForUpdate(this.chatId)\n        })\n    }\n\n    /**\n     * @callback waitForCallbackQueryCallback\n     * @param {CallbackQuery} query\n     */\n\n    /**\n     * If you send some inline keyboard after that you can call this method,\n     * pass to it string callback data or array of string or your InlineKeyboardMarkup\n     * and then when user press button CallbackQuery will be passed to callback\n     *\n     * @param {string|string[]|InlineKeyboardMarkup} data\n     * @param {waitForCallbackQueryCallback} callback\n     */\n    waitForCallbackQuery(data, callback) {\n        if (typeof data === 'string') {\n            this._waitForCallback(data)\n            this._waitingCallbackQueries[data] = callback\n        }\n\n        if (Array.isArray(data)) {\n            data.forEach(item => {\n                this._waitForCallback(item)\n                this._waitingCallbackQueries[item] = callback\n            })\n        }\n\n        if (data instanceof InlineKeyboardMarkup) {\n            data.inlineKeyboard.forEach(line => {\n                line.forEach(key => {\n                    this._waitForCallback(key.callbackData)\n                    this._waitingCallbackQueries[key.callbackData] = callback\n                })\n            })\n        }\n    }\n\n    /**\n     *\n     * @param {Object} menuData\n     */\n    runMenu(menuData) {\n        const startMessage = menuData.message\n\n        const ignoredKeys = [\n            'message',\n            'layout',\n            'options',\n            'resizeKeyboard',\n            'oneTimeKeyboard',\n            'anyMatch'\n        ]\n\n        const keys = Object.keys(menuData)\n        let keyboard = []\n\n        if (menuData.layout) {\n            let lineIndex = 0\n\n            keys.forEach(key => {\n                if (ignoredKeys.indexOf(key) === -1) {\n                    if (!keyboard[lineIndex])\n                        keyboard[lineIndex] = []\n\n                    keyboard[lineIndex].push(new KeyboardButton(key))\n\n                    if (typeof menuData.layout === 'number') {\n                        if (keyboard[lineIndex].length === menuData.layout) {\n                            lineIndex++\n                        }\n                    } else {\n                        if (keyboard[lineIndex].length === menuData.layout[lineIndex]) {\n                            lineIndex++\n                        }\n                    }\n\n                }\n            })\n        } else {\n            keys.forEach(key => {\n                if (ignoredKeys.indexOf(key) === -1) {\n                    keyboard.push([new KeyboardButton(key)])\n                }\n            })\n        }\n\n        const resizeKeyboard = (menuData.resizeKeyboard && menuData.resizeKeyboard === true)\n        const oneTimeKeyboard = (menuData.oneTimeKeyboard && menuData.oneTimeKeyboard === true)\n\n        let replyMarkup = new ReplyKeyboardMarkup(keyboard, resizeKeyboard, oneTimeKeyboard)\n\n        let options = {\n            reply_markup: JSON.stringify(replyMarkup)\n        }\n\n        if (menuData.options) options = Object.assign(options, menuData.options)\n\n        this.sendMessage(startMessage, options)\n\n        this.waitForRequest\n            .then($ => {\n                if (keys.indexOf($.message.text) > -1 &&\n                    ignoredKeys.indexOf($.message.text) === -1) {\n                    if (typeof menuData[$.message.text] === 'object') {\n                        $.runMenu(menuData[$.message.text])\n                    } else {\n                        menuData[$.message.text]($)\n                    }\n                } else if (menuData.anyMatch) {\n                    menuData.anyMatch($)\n                } else {\n                    $.runMenu(menuData)\n                }\n            })\n    }\n\n    /**\n     *\n     * @callback runFormCallback\n     * @param {Object} response\n     */\n\n    /**\n     *\n     * @param {Object} formData\n     * @param {runFormCallback} callback\n     */\n    runForm(formData, callback) {\n        let i = 0\n\n        const run = () => {\n            const key = keys[i]\n\n            this.sendMessage(formData[key].q, {\n                disable_web_page_preview: true,\n                reply_markup: formData[key].keyboard ? JSON.stringify({\n                    one_time_keyboard: true,\n                    resize_keyboard: formData[key].resize_keyboard || false,\n                    keyboard: formData[key].keyboard\n                }) : ''\n            })\n\n            this.waitForRequest\n                .then($ => {\n                    formData[key].validator($.message, (valid, value) => {\n                        if (valid === true) {\n                            result[key] = value\n                            i++\n\n                            if (i === Object.keys(formData).length) {\n                                try {\n                                    callback(result)\n                                }\n                                catch (e) {\n                                    this.logger.error({ 'error in user callback:': e })\n                                }\n\n                                return\n                            }\n\n                            run()\n                        } else {\n                            this.sendMessage(formData[key].error, {\n                                disable_web_page_preview: true\n                            })\n                                .then(() => {\n                                    run()\n                                })\n                        }\n                    })\n                })\n        }\n\n        let result = {}\n        const keys = Object.keys(formData)\n\n        run()\n    }\n\n    /**\n     *\n     * @param {Object} menuData\n     */\n    runInlineMenu(menuData, prevMessage) {\n        const method = menuData.method\n        const params = menuData.params || []\n        const layout = menuData.layout\n        const menu = menuData.menu\n\n        let keyboard = []\n\n        let callbackData = []\n\n        if (!layout) {\n            keyboard = menu.map(item => {\n                callbackData.push(Math.random().toString(36).substring(7))\n\n                return [new InlineKeyboardButton(\n                    item.text,\n                    item.url,\n                    callbackData[callbackData.length - 1]\n                )]\n            })\n        }\n        else {\n            let line = 0\n            menu.forEach(item => {\n                if (!keyboard[line]) keyboard[line] = []\n\n                callbackData.push(Math.random().toString(36).substring(7))\n\n                keyboard[line].push(new InlineKeyboardButton(\n                    item.text,\n                    item.url,\n                    callbackData[callbackData.length - 1]\n                ))\n\n                let goToNextLine = Array.isArray(layout) ? keyboard[line].length ===\n                                    layout[line] : keyboard[line].length === layout\n\n                if (goToNextLine)\n                    line++\n            })\n        }\n\n        if (typeof params[params.length - 1] === 'object') {\n            params[params.length - 1] = Object.assign(params[params.length - 1], {\n                reply_markup: JSON.stringify(new InlineKeyboardMarkup(keyboard))\n            })\n        }\n        else {\n            params.push({\n                reply_markup: JSON.stringify(new InlineKeyboardMarkup(keyboard))\n            })\n        }\n\n        var prepareCallback = (response) => {\n            callbackData.forEach((data, index) => {\n                this.waitForCallbackQuery(data, (query) => {\n                    if (menu[index].callback)\n                        try {\n                            menu[index].callback(query, response)\n                        }\n                        catch (e) {\n                            this.logger.error({ 'error in user callback:': e })\n                        }\n                    else {\n                        this.runInlineMenu(menu[index], response)\n                    }\n                })\n            })\n        }\n\n        if (!prevMessage) {\n            this[method].apply(this, params)\n                .then(response => {\n                    prepareCallback(response)\n                })\n        }\n        else {\n            params[0].chat_id = prevMessage.chat.id\n            params[0].message_id = prevMessage.messageId\n\n            this.api.editMessageText(menuData.message, params[0])\n                .then(response => {\n                    prepareCallback(response)\n                })\n        }\n    }\n\n    //api methods starts here\n\n    /**\n     *\n     * @param {string} text\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendMessage(text, options) {\n        return this._api.sendMessage(this.chatId, text, options)\n    }\n\n    /**\n     *\n     * @param {number} fromChatId\n     * @param {number} messageId\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    forwardMessage(fromChatId, messageId, options) {\n        return this._api.forwardMessage(this.chatId, fromChatId, messageId, options)\n    }\n\n    /**\n     *\n     * @param {InputFile|Object} photo\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendPhoto(photo, options) {\n        return this._api.sendPhoto(this.chatId, photo, options)\n    }\n\n    /**\n     *\n     * @param {InputFile|Object} audio\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendAudio(audio, options) {\n        return this._api.sendAudio(this.chatId, audio, options)\n    }\n\n    /**\n     *\n     * @param {InputFile|Object} document\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendDocument(document, options) {\n        return this._api.sendDocument(this.chatId, document, options)\n    }\n\n    /**\n     *\n     * @param {InputFile|Object} sticker\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendSticker(sticker, options) {\n        return this._api.sendSticker(this.chatId, sticker, options)\n    }\n\n    /**\n     *\n     * @param {InputFile|Object} video\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendVideo(video, options) {\n        return this._api.sendVideo(this.chatId, video, options)\n    }\n\n    /**\n     *\n     * @param {InputFile|Object} voice\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendVoice(voice, options) {\n        return this._api.sendVoice(this.chatId, voice, options)\n    }\n\n    /**\n     *\n     * @param {number} latitude\n     * @param {number} longitude\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendLocation(latitude, longitude, options) {\n        return this._api.sendLocation(this.chatId, latitude, longitude, options)\n    }\n\n    /**\n     *\n     * @param {number} latitude\n     * @param {number} longitude\n     * @param {string} title\n     * @param {string}address\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendVenue(latitude, longitude, title, address, options) {\n        return this._api.sendVenue(this.chatId, latitude, longitude, title, address, options)\n    }\n\n    /**\n     *\n     * @param {string} phoneNumber\n     * @param {string} firstName\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendContact(phoneNumber, firstName, options) {\n        return this._api.sendContact(this.chatId, phoneNumber, firstName, options)\n    }\n\n    /**\n     *\n     * @param {string} action\n     * @returns {Promise<Object>}\n     */\n    sendChatAction(action) {\n        return this._api.sendChatAction(this.chatId, action)\n    }\n\n    /**\n     *\n     * @param {number} offset\n     * @param {number} limit\n     * @returns {Promise<UserProfilePhotos>}\n     */\n    getUserProfilePhotos(offset, limit) {\n        return this._api.getUserProfilePhotos(userId, offset, limit)\n    }\n\n    /**\n     *\n     * @param {number} userId\n     * @returns {Promise.<boolean>}\n     */\n    kickChatMember(userId) {\n        return this._api.kickChatMember(this.chatId, userId)\n    }\n\n    /**\n     *\n     * @returns {Promise.<boolean>}\n     */\n    leaveChat() {\n        return this._api.leaveChat(this.chatId)\n    }\n\n    /**\n     *\n     * @param {number} userId\n     * @returns {Promise.<boolean>}\n     */\n    unbanChatMember(userId) {\n        return this._api.unbanChatMember(this.chatId, userId)\n    }\n\n    /**\n     *\n     * @returns {Promise<Chat>}\n     */\n    getChat() {\n        return this._api.getChat(this.chatId)\n    }\n\n    /**\n     *\n     * @returns {Promise<ChatMember[]>}\n     */\n    getChatAdministrators() {\n        return this._api.getChatAdministrators(this.chatId)\n    }\n\n    /**\n     *\n     * @returns {Promise<number>}\n     */\n    getChatMembersCount() {\n        return this._api.getChatMembersCount(this.chatId)\n    }\n\n    /**\n     *\n     * @param {number} userId\n     * @returns {Promise.<ChatMember>}\n     */\n    getChatMember(userId) {\n        return this._api.getChatMember(this.chatId, userId)\n    }\n}\n\nmodule.exports = Scope\n","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/storage/session/TelegramSession.js":"'use strict'\n\nclass TelegramSession {\n    /**\n     * @param {Object} userSession\n     * @param {Object} chatSession\n     */\n    constructor(userSession, chatSession) {\n        this._userSession = userSession\n        this._chatSession = chatSession\n    }\n\n    /**\n     * @returns {Object}\n     */\n    get userSession() {\n        return this._userSession\n    }\n\n    /**\n     * @returns {Object}\n     */\n    get chatSession() {\n        return this._chatSession\n    }\n}\n\nmodule.exports = TelegramSession","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/updateProcessors/InlineQueryUpdateProcessor.js":"'use strict'\n\nconst BaseUpdateProcessor = require('./BaseUpdateProcessor')\nconst InlineScope = require('../mvc/InlineScope')\n\nclass InlineQueryUpdateProcessor extends BaseUpdateProcessor {\n    /**\n     *\n     * @param {BaseTelegramDataSource} dataSource\n     */\n    constructor(dataSource) {\n        super(dataSource)\n\n        this._waitingQueries = {}\n        this._waitingChosenResults = {}\n    }\n\n    /**\n     *\n     * @param {Update} update\n     */\n    process(update) {\n        if (!this._dataSource.router.inlineQueryController) return\n\n        if (update.inlineQuery) {\n            let scope = new InlineScope(\n                update,\n                this._dataSource.api,\n                this._waitingChosenResults,\n                this._waitingQueries\n            )\n\n            let queryText = update.inlineQuery.query\n            let userId = update.inlineQuery.from.id\n\n            if (this._waitingQueries[queryText + ':' + userId] &&\n                this._waitingQueries[queryText + ':' + userId] !== null) {\n                const callback = this._waitingQueries[queryText + ':' + userId]\n                callback(scope)\n\n                if (this._waitingQueries[queryText + ':' + userId] == callback)\n                    this._waitingQueries[queryText + ':' + userId] = null\n\n                return\n            }\n\n            try {\n                this._dataSource.router.inlineQueryController.handle(scope)\n            }\n            catch (e) {\n                this._dataSource.logger.error({\n                    'error': e,\n                    'in controller': this._dataSource.router.inlineQueryController,\n                    'for update': update\n                })\n            }\n        }\n\n        if (update.chosenInlineResult) {\n            let resultId = update.chosenInlineResult.resultId\n            \n            if (this._waitingChosenResults[resultId] && this._waitingChosenResults[resultId] !== null) {\n                const callback = this._waitingChosenResults[resultId]\n\n                callback(update.chosenInlineResult)\n\n                if (this._waitingChosenResults[resultId] == callback) \n                    this._waitingChosenResults[resultId] = null\n\n                return\n            }\n\n            try {\n                this._dataSource.router.inlineQueryController.chosenResult(update.chosenInlineResult)\n            }\n            catch (e) {\n                this._dataSource.logger.error({\n                    'error': e,\n                    'in controller': this._dataSource.router.inlineQueryController,\n                    'for update': update\n                })\n            } \n        }\n    }\n\n    /**\n     *\n     * @param {Update} update\n     * @returns {boolean}\n     */\n    supports(update) {\n        return !!(update.inlineQuery || update.chosenInlineResult)\n    }\n}\n\nmodule.exports = InlineQueryUpdateProcessor","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/mvc/InlineScope.js":"'use strict' \n\nclass InlineScope {\n    /**\n     * \n     * @param {Update} update\n     * @param {TelegramApi} api\n     */\n    constructor(update, api, waitingChosenResults, waitingQueries) {\n        this._update = update\n        this._api = api\n        this._waitingChosenResults = waitingChosenResults\n        this._waitingQueries = waitingQueries\n        this._inlineQuery = update.inlineQuery\n        this._userId = update.inlineQuery.from.id\n    }\n\n    /**\n     *\n     * @returns {Update}\n     */\n    get update() {\n        return this._update\n    }\n\n    /**\n     * \n     * @returns {TelegramApi}\n     */\n    get api() {\n        return this._api\n    }\n\n    /**\n     * \n     * @returns {InlineQuery}\n     */\n    get inlineQuery() {\n        return this._inlineQuery\n    }\n\n    /**\n     * \n     * @returns {number}\n     */\n    get userId() {\n        return this._userId\n    }\n\n    /**\n     *\n     * @callback answerCallback\n     * @param {InlineQueryResult} chosenResult\n     */\n\n    /**\n     *\n     * @param {InlineQueryResult[]} results\n     * @param {Object} [options]\n     * @param {answerCallback} [callback]\n     * @returns Promise<boolean>\n     */\n    answer(results, options, callback) {\n        results = results.map(result => {\n            if (!result.id)\n                result._id = Math.random().toString(36).substring(7)\n\n            return result\n        })\n\n        this._api.answerInlineQuery(this._inlineQuery.id, results, options)\n            .then(() => {\n                results.forEach(result => {\n                    this._waitingChosenResults[result.id] = () => {\n                        callback(result)\n                    }\n                })\n            })\n    }\n\n    /**\n     *\n     * @param {InlineQueryResult[]} results\n     * @param {number} answersPerPage\n     * @param {answerCallback} callback\n     */\n    answerPaginated(results, answersPerPage, callback) {\n        let slicedData = results.slice(0, answersPerPage)\n\n        this.answer(slicedData, { next_offset: results.length.toString() }, callback)\n\n        this._waitingQueries[this._inlineQuery.query + ':' + this._inlineQuery.from.id] = ($) => {\n            $.answerPaginated(results.slice(answersPerPage), answersPerPage, callback)\n        }\n    }\n\n    //api methods starts here\n\n    /**\n     *\n     * @param {string} text\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendMessage(text, options) {\n        return this._api.sendMessage(this.userId, text, options)\n    }\n\n    /**\n     *\n     * @param {number} fromChatId\n     * @param {number} messageId\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    forwardMessage(fromChatId, messageId, options) {\n        return this._api.forwardMessage(this.userId, fromChatId, messageId, options)\n    }\n\n    /**\n     *\n     * @param {InputFile|Object} photo\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendPhoto(photo, options) {\n        return this._api.sendPhoto(this.userId, photo, options)\n    }\n\n    /**\n     *\n     * @param {InputFile|Object} audio\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendAudio(audio, options) {\n        return this._api.sendAudio(this.userId, audio, options)\n    }\n\n    /**\n     *\n     * @param {InputFile|Object} document\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendDocument(document, options) {\n        return this._api.sendDocument(this.userId, document, options)\n    }\n\n    /**\n     *\n     * @param {InputFile|Object} sticker\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendSticker(sticker, options) {\n        return this._api.sendSticker(this.userId, sticker, options)\n    }\n\n    /**\n     *\n     * @param {InputFile|Object} video\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendVideo(video, options) {\n        return this._api.sendVideo(this.userId, video, options)\n    }\n\n    /**\n     *\n     * @param {InputFile|Object} voice\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendVoice(voice, options) {\n        return this._api.sendVoice(this.userId, voice, options)\n    }\n\n    /**\n     *\n     * @param {number} latitude\n     * @param {number} longitude\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendLocation(latitude, longitude, options) {\n        return this._api.sendLocation(this.userId, latitude, longitude, options)\n    }\n\n    /**\n     *\n     * @param {number} latitude\n     * @param {number} longitude\n     * @param {string} title\n     * @param {string}address\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendVenue(latitude, longitude, title, address, options) {\n        return this._api.sendVenue(this.userId, latitude, longitude, title, address, options)\n    }\n\n    /**\n     *\n     * @param {string} phoneNumber\n     * @param {string} firstName\n     * @param {Object} [options]\n     * @returns {Promise<Message>}\n     */\n    sendContact(phoneNumber, firstName, options) {\n        return this._api.sendContact(this.userId, phoneNumber, firstName, options)\n    }\n\n    /**\n     *\n     * @param {string} action\n     * @returns {Promise<Object>}\n     */\n    sendChatAction(action) {\n        return this._api.sendChatAction(this.userId, action)\n    }\n\n    /**\n     *\n     * @param {number} offset\n     * @param {number} limit\n     * @returns {Promise<UserProfilePhotos>}\n     */\n    getUserProfilePhotos(offset, limit) {\n        return this._api.getUserProfilePhotos(userId, offset, limit)\n    }\n\n    /**\n     *\n     * @param {number} userId\n     * @returns {Promise<boolean>}\n     */\n    kickChatMember(userId) {\n        return this._api.kickChatMember(this.userId, userId)\n    }\n\n    /**\n     *\n     * @returns {Promise<boolean>}\n     */\n    leaveChat() {\n        return this._api.leaveChat(this.userId)\n    }\n\n    /**\n     *\n     * @param {number} userId\n     * @returns {Promise<boolean>}\n     */\n    unbanChatMember(userId) {\n        return this._api.unbanChatMember(this.userId, userId)\n    }\n\n    /**\n     *\n     * @returns {Promise<Chat>}\n     */\n    getChat() {\n        return this._api.getChat(this.userId)\n    }\n\n    /**\n     *\n     * @returns {Promise<ChatMember[]>}\n     */\n    getChatAdministrators() {\n        return this._api.getChatAdministrators(this.userId)\n    }\n\n    /**\n     *\n     * @returns {Promise<number>}\n     */\n    getChatMembersCount() {\n        return this._api.getChatMembersCount(this.userId)\n    }\n\n    /**\n     *\n     * @param {number} userId\n     * @returns {Promise.<ChatMember>}\n     */\n    getChatMember(userId) {\n        return this._api.getChatMember(this.userId, userId)\n    }\n}\n\nmodule.exports = InlineScope","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/storage/session/InMemoryStorage.js":"'use strict'\n\nconst BaseStorage = require('../BaseStorage')\n\n/**\n * Standard in memory storage, will be used if there is no custom storage passed Telegram\n */\nclass InMemoryStorage extends BaseStorage {\n    constructor() {\n        super()\n\n        this._storage = {}\n    }\n\n    /**\n     * @param {string} storage\n     * @param {string} key\n     * @returns {Promise<Object>}\n     */\n    get(storage, key) {\n        return new Promise(resolve => {\n            if (!this._storage[storage]) this._storage[storage] = {}\n\n            resolve(this._storage[storage][key] || {})\n        })\n    }\n\n    /**\n     * @param {string} storage\n     * @param {key} key\n     * @param {Object} data\n     */\n    set(storage, key, data) {\n        return new Promise(resolve => {\n            if (!this._storage[storage]) this._storage[storage] = {}\n\n            this._storage[storage][key] = data\n\n            resolve()\n        })\n    }\n\n    /**\n     * @param {string} storage\n     * @param {string} key\n     */\n    remove(storage, key) {\n        return new Promise(resolve => {\n            if (this._storage[storage] && this._storage[storage][key]) {\n                this._storage[storage][key] = null\n            }\n\n            resolve()\n        })\n    }\n}\n\nmodule.exports = InMemoryStorage","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/storage/BaseStorage.js":"'use strict'\n\n/**\n * Represents some abstract storage\n * you must extend BaseStorage and override all methods to create your own storage\n */\nclass BaseStorage {\n    /**\n     * @param {string} storage\n     * @param {string} key\n     * @returns {Promise<Object>}\n     */\n    get(storage, key) { throw 'Not implemented' }\n\n    /**\n     * @param {string} storage\n     * @param {string} key\n     * @param {Object} data\n     * @returns {Promise<>}\n     */\n    set(storage, key, data) { throw 'Not implemented' }\n\n    /**\n     * @param {string} storage\n     * @param {string} key\n     * @returns {Promise<>}\n     */\n    remove(storage, key) { throw 'Not implemented' }\n}\n\nmodule.exports = BaseStorage","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/storage/session/TelegramSessionStorage.js":"'use strict'\n\nconst CHAT_STORAGE = 'chatStorage'\nconst USER_STORAGE = 'userStorage'\n\nclass TelegramSessionStorage {\n    /**\n     *\n     * @param {BaseStorage} storage\n     */\n    constructor(storage) {\n        this._storage = storage\n        this._cache = {}\n    }\n\n    /**\n     * @param {number} userId\n     * @param {string} key\n     * @returns {Promise<*>}\n     */\n    getUserSession(userId, key) {\n        return this._storage.get(\n            USER_STORAGE,\n            this._generateKeyForUserSession(userId, key)\n        )\n    }\n\n    /**\n     * @param {number} userId\n     * @param {string} key\n     * @param {*} value\n     * @returns {Promise}\n     */\n    setUserSession(userId, key, value) {\n        return this._storage.set(\n            USER_STORAGE,\n            this._generateKeyForUserSession(userId, key),\n            value\n        )\n    }\n\n    /**\n     * @param {number} chatId\n     * @param {string} key\n     * @returns {Promise<*>}\n     */\n    getChatSession(chatId, key) {\n        return this._storage.get(\n            CHAT_STORAGE,\n            this._generateKeyForUserSession(chatId, key)\n        )\n    }\n\n    /**\n     * @param {number} chatId\n     * @param {string} key\n     * @param {*} value\n     * @returns {Promise}\n     */\n    setChatSession(chatId, key, value) {\n        return this._storage.set(\n            CHAT_STORAGE,\n            this._generateKeyForUserSession(chatId, key),\n            value\n        )\n    }\n\n    /**\n     * @param {number} userId\n     * @param {string} key\n     * @returns {string}\n     * @private\n     */\n    _generateKeyForUserSession(userId, key) {\n        return `USER_${userId}_${key}`\n    }\n\n    /**\n     * @param {number} chatId\n     * @param {string} key\n     * @returns {string}\n     * @private\n     */\n    _generateKeyForChatSession(chatId, key) {\n        return `CHAT_${chatId}_${key}`\n    }\n}\n\nmodule.exports = TelegramSessionStorage\n","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/mvc/TelegramBaseController.js":"'use strict'\n\n/**\n * Represents any TelegramController\n * you must extend TelegramBaseController \n * and override at least the handle method to create controller\n */\nclass TelegramBaseController {\n    constructor() {\n        this._api = null\n        this._localization = null\n    }\n\n    /**\n     * This method of your controller will be called to handle command.\n     *\n     * @param {Scope} scope\n     */\n    handle(scope) { throw 'Not implemented' }\n\n    /**\n     * If you want a specific methods of your controller be called for specific commands,\n     * you should return here an plain object where key is a route and value is name of your method.\n     * In that case handle method will not be called and scope will be passed to your method.\n     * Return example: { '/start': 'startMethod' }\n     *\n     * @returns {Object}\n     */\n    get routes() { return {} }\n\n    /**\n     * This method will be called before any command handler or handle method.\n     * You can modify incoming scope and must return it.\n     * Your modified scope will be passed to controller.\n     *\n     * @param {Scope} scope\n     * @returns {Scope}\n     */\n    before(scope) { return scope }\n\n    /**\n     * \n     * @param {TelegramApi} api\n     */\n    set api(api) {\n        this._api = api\n    }\n\n    /**\n     *\n     * @param {Ivan} localization\n     */\n    set localization(localization) {\n        this._localization = localization\n    }\n}\n\nmodule.exports = TelegramBaseController","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/mvc/TelegramBaseCallbackQueryController.js":"'use strict'\n\n/**\n * Base Callback Query Controller\n * you must extend TelegramBaseCallbackQueryController \n * to create callback query controller.\n */\nclass TelegramBaseCallbackQueryController {\n    /**\n     * This method of your controller will be called to handle callbackQuery.\n     *\n     * @param {CallbackQuery} query\n     */\n    handle(query) { throw 'Not implemented' }\n}\n\nmodule.exports = TelegramBaseCallbackQueryController","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/mvc/TelegramBaseInlineQueryController.js":"'use strict'\n\n/**\n * Base inline query controller\n * you must extend TelegramBaseInlineQueryController\n * and override at least the handle method to create controller\n */\nclass TelegramBaseInlineQueryController {\n    constructor() {\n        this._api = null\n        this._localization = null\n    }\n    \n    /**\n     * This method of your controller will be called to handle inline query.\n     *\n     * @param {InlineScope} scope\n     */\n    handle(scope) { throw 'Not implemented' }\n\n    /**\n     *\n     * @param {ChosenInlineResult} result\n     */\n    chosenResult(result) { }\n    \n    /**\n     *\n     * @param {TelegramApi} api\n     */\n    set api(api) {\n        this._api = api\n    }\n\n    /**\n     *\n     * @param {Ivan} localization\n     */\n    set localization(localization) {\n        this._localization = localization\n    }\n}\n\nmodule.exports = TelegramBaseInlineQueryController","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/localization/Ivan.js":"'use strict'\n\nconst Localization = require('./Localization')\n\nconst LOCALIZATION_STORAGE = 'localizationStorage'\n\n/**\n * Localization class\n */\nclass Ivan {\n    /**\n     *\n     * @param {BaseStorage} storage\n     * @param {Object[]} localizations\n     */\n    constructor(storage, localizations) {\n        this._storage = storage\n        this._localizations = []\n        this._loc = {}\n\n        const locHandler = {\n            set: () => {\n                throw 'Cant set value for localization'\n            },\n            get: (target, key, receiver) => {\n                let loc = this.localizationForLanguage(key)\n                if (loc) {\n                    return this.localizationForLanguage(key)\n                }\n                else {\n                    return Reflect.get(target, key, receiver)\n                }\n            }\n        }\n        localizations.forEach(localization => {\n            if (!this._checkLocalization(localization)) throw `Wrong localization: ${localization}`\n\n            this._localizations.push(Localization.deserialize(localization))\n        })\n\n        return new Proxy(this, locHandler)\n    }\n\n    /**\n     * Translates localized string to other language\n     *\n     * @param {string} localizedString\n     * @param {string} toLang\n     * @returns {string}\n     */\n    translate(localizedString, toLang) {\n        return this.loc[toLang][this.getPhraseKey(localizedString)]\n    }\n\n    /**\n     * Returns phrases for user by userId\n     *\n     * @param {number} userId\n     * @returns {Promise<Object>}\n     */\n    forUser(userId) {\n        return this.getLanguageForUser(userId)\n            .then(lang => {\n                return this.localizationForLanguage(lang)\n            })\n    }\n\n    /**\n     * Sets language for user by userId\n     *\n     * @param {number} userId\n     * @param {string} lang\n     */\n    setLanguageForUser(userId, lang) {\n        this._storage.set(LOCALIZATION_STORAGE, userId, { lang: lang })\n    }\n\n    /**\n     * Returns stored language for user by userId\n     *\n     * @param {number} userId\n     * @returns {Promise<string>}\n     */\n    getLanguageForUser(userId) {\n        return this._storage.get(LOCALIZATION_STORAGE, userId)\n            .then(user => {\n                if (user.lang) {\n                    return user.lang\n                }\n                else {\n                    throw 'No data for that user'\n                }\n            })\n    }\n\n    /**\n     * Returns phrases for language\n     *\n     * @param {string} lang\n     * @returns {Object|null}\n     */\n    localizationForLanguage(lang) {\n        let loc = this._localizations.find(localization => localization.lang === lang)\n        return loc ? loc.phrases : null\n    }\n\n    /**\n     * Returns language by phrase\n     * \n     * @param inputPhrase\n     * @returns {string|null}\n     */\n    languageByPhrase(inputPhrase) {\n        for (const loc of this._localizations) {\n            for (const phrase in loc.phrases) {\n                if (loc.phrases[phrase] === inputPhrase) {\n                    return loc.lang\n                }\n            }\n        }\n        \n        return null\n    }\n\n    /**\n     * Returns the key name of phrase\n     * \n     * @param {string} inputPhrase\n     * @returns {string|null}\n     */\n    getPhraseKey(inputPhrase) {\n        for (const loc of this._localizations) {\n            for (const phrase in loc.phrases) {\n                if (loc.phrases[phrase] === inputPhrase) {\n                    return phrase\n                }\n            }\n        }\n\n        return null\n    }\n\n    /**\n     *\n     * @param {Object} rawLocalization\n     * @returns {Boolean}\n     * @private\n     */\n    _checkLocalization(rawLocalization) {\n        return rawLocalization.lang && rawLocalization.phrases\n    }\n}\n\nmodule.exports = Ivan","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/localization/Localization.js":"'use strict'\n\n/**\n * Represents Localization file\n */\nclass Localization {\n    /**\n     *\n     * @param {String} lang\n     * @param {Object} phrases\n     */\n    constructor(lang, phrases) {\n        this._lang = lang\n        this._phrases = phrases\n    }\n\n    /**\n     * \n     * @returns {String}\n     */\n    get lang() {\n        return this._lang\n    }\n\n    /**\n     *\n     * @returns {Object}\n     */\n    get phrases() {\n        return this._phrases\n    }\n\n    /**\n     *\n     * @param {Object} raw\n     * @returns {Localization}\n     */\n    static deserialize(raw) {\n        return new Localization(raw.lang, raw.phrases)\n    }\n}\n\nmodule.exports = Localization","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/mvc/BaseScopeExtension.js":"'use strict'\n\n/**\n * Represents any scope extension\n * \n * if you want to create your own scope extension, \n * you must extend BaseScopeExtension \n * and override all methods\n */\nclass BaseScopeExtension {\n    /**\n     * \n     * @param {Scope} scope\n     */\n    constructor(scope) { }\n\n    /**\n     * This method will be called by your extension user ( $.yourExtension(args...) )\n     * @param {...*}\n     */\n    process() { throw 'Not implemented' }\n\n    /**\n     * You should return your extension name here. That name will be in scope. ( $.yourExtensionName )\n     * @returns {string}\n     */\n    get name() { throw 'Not implemented' }\n}\n\nmodule.exports = BaseScopeExtension","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/updateFetchers/BaseUpdateFetcher.js":"'use strict'\n\nclass BaseUpdateFetcher {\n    /**\n     * @param {TelegramApi} api\n     * @param {BaseLogger} logger\n     */\n    constructor(api, logger) {\n        this._api = api\n        this._logger = logger\n    }\n\n    /**\n     * @callback fetchUpdatesCallback\n     * @param {Update[]} updates\n     */\n\n    /**\n     * @param {fetchUpdatesCallback} callback\n     */\n    fetch(callback) { throw 'Not implemented' }\n}\n\nmodule.exports = BaseUpdateFetcher","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/storage/sharedStorage/SharedStorage.js":"'use strict'\n\nconst BaseStorage = require('../BaseStorage')\nconst Message = require('./models/Message')\nconst GetMessage = require('./models/GetMessage')\nconst SetMessage = require('./models/SetMessage')\nconst RemoveMessage = require('./models/RemoveMessage')\nconst ResponseMessage = require('./models/ResponseMessage')\n\n/**\n * SharedStorage used to sync data between workers\n */\nclass SharedStorage extends BaseStorage {\n    /**\n     * @param {BaseStorage} storage\n     */\n    constructor(storage) {\n        super()\n\n        this._storage = storage\n        this._callbacks = {}\n    }\n\n    /**\n     * @param {object} msg\n     * @param {Worker} worker\n     */\n    handleMessageFromWorkers(msg, worker) {\n        msg = Message.deserialize(msg)\n\n        if (msg instanceof GetMessage) {\n            this._storage.get(msg.storage, msg.key)\n                .then(data => {\n                    worker.send(Message.response(data, msg.id).serialize())\n                })\n        }\n\n        if (msg instanceof SetMessage) {\n            this._storage.set(msg.storage, msg.key, msg.value)\n                .then(() => {\n                    worker.send(Message.response(null, msg.id).serialize())\n                })\n        }\n\n        if (msg instanceof RemoveMessage) {\n            this._storage.remove(msg.storage, msg.key)\n                .then(() => {\n                    worker.send(Message.response(null, msg.id).serialize())\n                })\n        }\n    }\n\n    /**\n     * @param {object} msg\n     */\n    handleMessageFromMaster(msg) {\n        msg = Message.deserialize(msg)\n\n        if (msg instanceof ResponseMessage) {\n            this._callbacks[msg.id](msg.data)\n        }\n    }\n\n    /**\n     *\n     * @param {string} storage\n     * @param {string} key\n     * @returns {Promise<Object>}\n     */\n    get(storage, key) {\n        return new Promise(resolve => {\n            let id = this._genId()\n\n            this._callbacks[id] = resolve\n\n            process.send(Message.get(storage, key, id).serialize())\n        })\n    }\n\n    /**\n     *\n     * @param {string} storage\n     * @param {key} key\n     * @param {Object} data\n     * @returns {Promise<>}\n     */\n    set(storage, key, data) {\n        return new Promise(resolve => {\n            let id = this._genId()\n\n            this._callbacks[id] = resolve\n\n            process.send(Message.set(storage, key, data, id).serialize())\n        })\n    }\n\n    /**\n     *\n     * @param {string} storage\n     * @param {string} key\n     */\n    remove(storage, key) {\n        return new Promise(resolve => {\n            let id = this._genId()\n\n            this._callbacks[id] = resolve\n\n            process.send(Message.remove(storage, key, id).serialize())\n        })\n    }\n\n    /**\n     * @returns {string}\n     * @private\n     */\n    _genId() {\n        return Math.random().toString(36).substring(7)\n    }\n}\n\nmodule.exports = SharedStorage","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/storage/sharedStorage/models/Message.js":"'use strict'\n\nconst GetMessage = require('./GetMessage')\nconst SetMessage = require('./SetMessage')\nconst RemoveMessage = require('./RemoveMessage')\nconst ResponseMessage = require('./ResponseMessage')\n\nclass Message {\n    constructor(type, payload) {\n        this._type = type\n        this._payload = payload\n    }\n\n    /**\n     * @param {string} storage\n     * @param {string} key\n     * @param {string} id\n     */\n    static get(storage, key, id) {\n        return new Message('get', new GetMessage(storage, key, id))\n    }\n\n    /**\n     * @param {string} storage\n     * @param {string} key\n     * @param {object} value\n     * @param {string} id\n     */\n    static set(storage, key, value, id) {\n        return new Message('set', new SetMessage(storage, key, value, id))\n    }\n\n    /**\n     * @param {string} storage\n     * @param {string} key\n     * @param {string} id\n     */\n    static remove(storage, key, id) {\n        return new Message('remove', new RemoveMessage(storage, key, id))\n    }\n\n    /**\n     * @param {object} data\n     * @param {string} id\n     * @returns {Message}\n     */\n    static response(data, id) {\n        return new Message('response', new ResponseMessage(data, id))\n    }\n\n    /**\n     * @returns {object}\n     */\n    serialize() {\n        return {\n            type: this._type,\n            payload: this._payload.serialize()\n        }\n    }\n\n    static deserialize(raw) {\n        switch (raw.type) {\n            case 'get':\n                return GetMessage.deserialize(raw.payload)\n                break\n\n            case 'set':\n                return SetMessage.deserialize(raw.payload)\n                break\n\n            case 'remove':\n                return RemoveMessage.deserialize(raw.payload)\n                break\n\n            case 'response':\n                return ResponseMessage.deserialize(raw.payload)\n                break\n\n            default:\n                return null\n                break\n        }\n    }\n}\n\nmodule.exports = Message","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/storage/sharedStorage/models/GetMessage.js":"'use strict'\n\nclass GetMessage {\n    /**\n     * @param {string} storage\n     * @param {string} key\n     * @param {string} id\n     */\n    constructor(storage, key, id) {\n        this._storage = storage\n        this._key = key\n        this._id = id\n    }\n\n    /**\n     * @returns {string}\n     */\n    get storage() {\n        return this._storage\n    }\n\n    /**\n     * @returns {string}\n     */\n    get key() {\n        return this._key\n    }\n\n    /**\n     * @returns {string}\n     */\n    get id() {\n        return this._id\n    }\n\n    /**\n     * @returns {object}\n     */\n    serialize() {\n        return {\n            storage: this._storage,\n            key: this._key,\n            id: this._id\n        }\n    }\n\n    /**\n     * @param {object} raw\n     * @returns {GetMessage}\n     */\n    static deserialize(raw) {\n        return new GetMessage(\n            raw.storage,\n            raw.key,\n            raw.id\n        )\n    }\n}\n\nmodule.exports = GetMessage","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/storage/sharedStorage/models/SetMessage.js":"'use strict'\n\nclass SetMessage {\n    /**\n     * @param {string} storage\n     * @param {string} key\n     * @param {object} value\n     * @param {string} id\n     */\n    constructor(storage, key, value, id) {\n        this._storage = storage\n        this._key = key\n        this._value = value\n        this._id = id\n    }\n\n    /**\n     * @returns {string}\n     */\n    get storage() {\n        return this._storage\n    }\n\n    /**\n     * @returns {string}\n     */\n    get key() {\n        return this._key\n    }\n\n    /**\n     * @returns {object}\n     */\n    get value() {\n        return this._value\n    }\n\n    /**\n     * @returns {string}\n     */\n    get id() {\n        return this._id\n    }\n\n    /**\n     * @returns {object}\n     */\n    serialize() {\n        return {\n            storage: this._storage,\n            key: this._key,\n            value: this._value,\n            id: this._id\n        }\n    }\n\n    /**\n     * @param {object} raw\n     * @returns {SetMessage}\n     */\n    static deserialize(raw) {\n        return new SetMessage(\n            raw.storage,\n            raw.key,\n            raw.value,\n            raw.id\n        )\n    }\n}\n\nmodule.exports = SetMessage","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/storage/sharedStorage/models/RemoveMessage.js":"'use strict'\n\nclass RemoveMessage {\n    /**\n     * @param {string} storage\n     * @param {string} key\n     * @param {string} id\n     */\n    constructor(storage, key, id) {\n        this._storage = storage\n        this._key = key\n        this._id = id\n    }\n\n    /**\n     * @returns {string}\n     */\n    get storage() {\n        return this._storage\n    }\n\n    /**\n     * @returns {string}\n     */\n    get key() {\n        return this._key\n    }\n\n    /**\n     * @returns {string}\n     */\n    get id() {\n        return this._id\n    }\n\n    /**\n     * @returns {object}\n     */\n    serialize() {\n        return {\n            storage: this._storage,\n            key: this._key,\n            id: this._id\n        }\n    }\n\n    /**\n     * @param {object} raw\n     * @returns {RemoveMessage}\n     */\n    static deserialize(raw) {\n        return new RemoveMessage(\n            raw.storage,\n            raw.key,\n            raw.id\n        )\n    }\n}\n\nmodule.exports = RemoveMessage","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/storage/sharedStorage/models/ResponseMessage.js":"'use strict'\n\nclass ResponseMessage {\n    /**\n     * @param {object} data\n     * @param {string} id\n     */\n    constructor(data, id) {\n        this._data = data\n        this._id = id\n    }\n\n    /**\n     * @returns {object}\n     */\n    get data() {\n        return this._data\n    }\n\n    /**\n     * @returns {string}\n     */\n    get id() {\n        return this._id\n    }\n\n    /**\n     * @returns {object}\n     */\n    serialize() {\n        return {\n            data: this._data,\n            id: this._id\n        }\n    }\n\n    /**\n     * @param {object} raw\n     * @returns {ResponseMessage}\n     */\n    static deserialize(raw) {\n        return new ResponseMessage(\n            raw.data,\n            raw.id\n        )\n    }\n}\n\nmodule.exports = ResponseMessage","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/ipc/TelegramIPC.js":"'use strict'\n\nclass TelegramIPC {\n    /**\n     * Worker can ask master to send him next update from specific chat\n     *\n     * @param {number} chatId\n     */\n    askForNextUpdate(chatId) {\n        process.send({ type: 'waitForUpdate', chatId: chatId })\n    }\n\n    /**\n     * Worker can ask master to send him next callback query for specific callback data\n     *\n     * @param {string} chatId\n     */\n    askForNextCallbackQuery(data) {\n        process.send({ type: 'waitForCallbackQuery', data: data })\n    }\n}\n\nmodule.exports = TelegramIPC","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/webAdmin/server/WebAdmin.js":"'use strict'\n\nconst http = require('http')\nconst path = require('path')\nconst fs = require('fs')\n\nclass WebAdmin {\n    /**\n     * @param {string} host\n     * @param {number} port\n     * @param {string} path\n     * @param {WebAdminLogger} logger\n     * @param {Telegram} telegram\n     */\n    constructor(host, port, path, logger, telegram) {\n        this._host = host\n        this._port = port\n        this._path = path\n        this._logger = logger\n        this._telegram = telegram\n\n        this._server = http.createServer((request, response) => {\n            this._handleRequest(request, response)\n        }).listen(this._port, this._host)\n\n        this._logger.log({ 'WebAdmin ': `started at ${host}:${port}`})\n    }\n\n    /**\n     * @param request\n     * @param response\n     * @private\n     */\n    _handleRequest(request, response) {\n        let reqPath =  path.join(this._path, request.url == '/' ? '/index.html' : request.url)\n\n        switch (request.url) {\n            case '/logs':\n                response.end(this._logger.getAllLogs())\n                break\n            case '/restartWorkers':\n                this._telegram.restartWorkers()\n                response.end('ok')\n                break\n            case '/downloadLogs':\n                response.writeHead(200, {\n                    'Content-Type': 'text/plain',\n                    'Content-Disposition': 'attachment; filename=logs.txt'\n                })\n                response.end(this._logger.getAllLogs())\n                break\n            case '/statistics':\n                response.end(JSON.stringify({\n                    totalRequests: this._telegram.statistics.getTotalRequestsCount(),\n                    requestsForWorkers: this._telegram.statistics.getWorkersRequests(),\n                    uptime: this._telegram.statistics.getUptime(),\n                    workersStatus: this._telegram.statistics.getWorkersStatus()\n                }))\n\n        }\n        \n        fs.lstat(reqPath, (err, stats) => {\n            if (stats && stats.isFile()) {\n                this._sendFile(response, reqPath, stats.size)\n            }\n            else {\n                this._sendNotFound(response)\n            }\n        })\n    }\n\n    /**\n     * @param response\n     * @param {string} filePath\n     * @param {number} size\n     * @private\n     */\n    _sendFile(response, filePath, size) {\n        const fileStream = fs.createReadStream(filePath)\n        const ext = path.parse(filePath).ext\n\n        response.writeHead(200, {\n            'Content-Type': this._getMimeType(ext),\n            'Content-Length': size\n        })\n\n        fileStream.pipe(response)\n    }\n\n    /**\n     * @param extension\n     * @returns {*}\n     * @private\n     */\n    _getMimeType(extension) {\n        switch (extension) {\n            case '.html':\n                return 'text/html'\n            case '.js':\n                return 'application/javascript'\n            case '.css':\n                return 'text/css'\n            case '.svg':\n                return 'image/svg+xml'\n            default:\n                return 'text/plain'\n        }\n    }\n\n    /**\n     * @param response\n     * @private\n     */\n    _sendNotFound(response) {\n        response.writeHead(404)\n        response.end('404 Not found')\n    }\n}\n\nmodule.exports = WebAdmin","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/updateFetchers/WebhookUpdateFetcher.js":"'use strict'\n\nconst BaseUpdateFetcher = require('./BaseUpdateFetcher')\nconst http = require('http')\nconst Update = require('../models/Update')\n\nclass WebhookUpdateFetcher extends BaseUpdateFetcher {\n    /**\n     * @param {TelegramApi} api\n     * @param {BaseLogger} logger\n     * @param {string} url\n     * @param {string} host\n     * @param {number} port\n     * @param {string} apiToken\n     */\n    constructor(api, logger, url, host, port, apiToken) {\n        super(api, logger)\n\n        this._url = url\n        this._host = host\n        this._port = port\n        this._apiToken = apiToken\n\n        this._server = http.createServer((req, res) => this._handleRequest(req, res))\n    }\n\n    /**\n     * @param {fetchUpdatesCallback} callback\n     */\n    fetch(callback) {\n        this._callback = callback\n        this._getUpdates()\n    }\n\n    /**\n     * @private\n     */\n    _getUpdates() {\n        this._api.setWebhook({ url: this._url })\n            .then(() => {\n                this._server.listen(this._port, this._host, () => {\n                    this._logger.log({ WebhookUpdateFetcher: `Server started at ${this._host}:${this._port}` })\n                })\n            })\n    }\n\n    /**\n     * @param req\n     * @param res\n     * @private\n     */\n    _handleRequest(req, res) {\n        const validateRegExp = new RegExp(this._apiToken)\n\n        if (!validateRegExp.test(req.url)) {\n            this._logger.error({ webhook: 'Not authorized request from Telegram' })\n            res.statusCode = 401\n            res.end()\n        } else if (req.method === 'POST') {\n            let chunks = []\n\n            req.on('data', chunk => {\n                chunks.push(chunk)\n            })\n\n            req.on('end', () => {\n                res.end('OK')\n\n                const data = Buffer.concat(chunks).toString('utf-8')\n                let parsedUpdate\n\n                try {\n                    parsedUpdate = JSON.parse(data)\n                }\n                catch (e) {\n                    this._logger.error({ 'Error parsing webhook update from json': e })\n                }\n\n                if(!parsedUpdate)\n                    return\n\n                this._logger.log({ webhook: 'Got ', update: parsedUpdate })\n\n                const update = Update.deserialize(parsedUpdate)\n\n                this._callback([update])\n            })\n        } else {\n            this._logger.error({ webhook: 'Authorized request from Telegram but not a POST' })\n\n            res.statusCode = 400\n            res.end()\n        }\n    }\n}\n\nmodule.exports = WebhookUpdateFetcher","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/updateFetchers/LongPoolingUpdateFetcher.js":"'use strict'\n\nconst BaseUpdateFetcher = require('./BaseUpdateFetcher')\n\nclass LongPoolingUpdateFetcher extends BaseUpdateFetcher {\n    /**\n     * @param {TelegramApi} api\n     * @param {BaseLogger} logger\n     */\n    constructor(api, logger) {\n        super(api, logger)\n\n        this._callback = null\n    }\n\n    /**\n     * @callback fetchUpdatesCallback\n     * @param {Update[]} updates\n     */\n\n    /**\n     * @param {fetchUpdatesCallback} callback\n     */\n    fetch(callback) {\n        this._callback = callback\n        this._api.setWebhook({ url: '' })\n        this._getUpdates()\n    }\n\n    /**\n     * @param {number} [offset]\n     * @private\n     */\n    _getUpdates(offset) {\n        offset = offset || 0\n\n        this._api.getUpdates({ timeout: 50, offset })\n            .then(updates => {\n                if (updates.length > 0)\n                    this._callback(updates)\n\n                const nextOffset = updates.length > 0 ? updates[updates.length - 1].updateId + 1 : offset\n\n                this._getUpdates(nextOffset)\n            })\n            .catch(error => {\n                this._logger.error({ fetchUpdate: error })\n                this._getUpdates()\n            })\n    }\n}\n\nmodule.exports = LongPoolingUpdateFetcher","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/logger/WebAdminLogger.js":"'use strict'\n\nconst ConsoleLogger = require('./ConsoleLogger')\n\nclass WebAdminLogger extends ConsoleLogger {\n    constructor() {\n        super()\n\n        this._logs = ''\n    }\n\n    /**\n     * @returns {string}\n     */\n    getAllLogs() {\n        return this._logs\n    }\n\n    /**\n     *\n     * @param {string} color\n     * @param {string} prefix\n     * @param {Object} data\n     * @private\n     */\n    _prepareLog(color, prefix, data) {\n        super._prepareLog(color, prefix, data)\n\n        Object.keys(data).forEach(key => {\n            if (data[key] instanceof Error) {\n                data[key] = data[key].stack || data[key]\n            }\n        })\n\n        this._logs += `${new Date().toString().split(' ')[4]} [${prefix}] - `\n\n        Object.keys(data).forEach(key => {\n            if (typeof data[key] == 'object')\n                this._logs += `${key} ${JSON.stringify(data[key], null, 2)}`\n            else\n                this._logs += `${key} ${data[key]}`\n        })\n        this._logs += '\\n'\n    }\n}\n\nmodule.exports = WebAdminLogger","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/statistics/Statistics.js":"'use strict'\n\nclass Statistics {\n    constructor() {\n        this._requestsCount = 0\n        this._workersRequests = {}\n        this._workers = {}\n    }\n\n    /**\n     * @param {number} workerPid\n     */\n    registrateRequest(workerPid) {\n        this._requestsCount++\n\n        if (!this._workersRequests[workerPid])\n            this._workersRequests[workerPid] = 1\n        else\n            this._workersRequests[workerPid] += 1\n    }\n\n    /**\n     * @returns {number}\n     */\n    getTotalRequestsCount() {\n        return this._requestsCount\n    }\n\n    /**\n     * @returns {{}}\n     */\n    getWorkersRequests() {\n        return this._workersRequests\n    }\n\n    /**\n     * @returns {string}\n     */\n    getUptime() {\n        return this._secondsToHms(process.uptime())\n    }\n\n    /**\n     * @returns {{}}\n     */\n    getWorkersStatus() {\n        return this._workers    \n    }\n\n    /**\n     * @param {number} workerPid\n     */\n    addWorker(workerPid) {\n        this._workers[workerPid] = {\n            status: 'live'\n        }\n    }\n\n    /**\n     * @param {number} workerPid\n     */\n    workerDied(workerPid) {\n        this._workers[workerPid] = {\n            status: 'died'\n        }\n    }\n\n    _secondsToHms(d) {\n        d = Number(d)\n        var h = Math.floor(d / 3600)\n        var m = Math.floor(d % 3600 / 60)\n        var s = Math.floor(d % 3600 % 60)\n        return ((h > 0 ? h + \":\" + (m < 10 ? \"0\" : \"\") : \"\") + m + \":\" + (s < 10 ? \"0\" : \"\") + s)\n    }\n}\n\nmodule.exports = Statistics","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/routing/commands/TextCommand.js":"'use strict'\n\nconst BaseCommand = require('./BaseCommand')\n\nclass TextCommand extends BaseCommand {\n    /**\n     * @param {string} textPattern\n     * @param {string} [handler]\n     */\n    constructor(textPattern, handler) {\n        super()\n        this._textPattern = textPattern\n        this._handler = handler\n    }\n\n    /**\n     * @param {Scope} scope\n     * @returns {boolean}\n     */\n    test(scope) {\n        return scope.message.text &&\n            scope.message.text.indexOf(this._textPattern) > -1\n    }\n\n    /**\n     * @returns {string}\n     */\n    get handlerName() {\n        return this._handler\n    }\n}\n\nmodule.exports = TextCommand","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/lib/routing/commands/RegexpCommand.js":"'use strict'\n\nconst BaseCommand = require('./BaseCommand')\n\nclass RegexpCommand extends BaseCommand {\n    /**\n     * @param {RegExp} regexp\n     * @param {string} [handler]\n     */\n    constructor(regexp, handler) {\n        super()\n        this._regexp = regexp\n        this._handler = handler\n    }\n\n    /**\n     * @param {Scope} scope\n     * @returns {boolean}\n     */\n    test(scope) {\n        return scope.message.text && this._regexp.test(scope.message.text)\n    }\n\n    /**\n     * @returns {string}\n     */\n    get handlerName() {\n        return this._handler\n    }\n}\n\nmodule.exports = RegexpCommand","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/api-scheme/GenerateTGModels.js":"'use strict'\n\nconst ModelsGenerator = require('./models/ModelsGenerator')\nconst fs = require('fs')\nconst net = require('tiny_request')\n\nnet.get('https://core.telegram.org/bots/api', data => {\n    const generator = new ModelsGenerator(data)\n\n    const models = generator.generateModels()\n\n    console.info(`${models.length} models generated\\n`)\n\n    models.forEach(model => {\n        fs.writeFile(`./lib/models/${model.name}.js`, model.modelCode, err => {\n            if(err) {\n                return console.error(`Failed to save model: ${model.name}`, err)\n            }\n            console.info(`Saved model: ${model.name}`)\n        })\n    })\n\n    fs.writeFile(`./lib/models/Models.js`, generateAllModelsExport(models), err => {\n        if(err) {\n            return console.error(`Failed to save models export file:`, err)\n        }\n        console.info(`Saved models export file`)\n    })\n\n})\n\nfunction generateAllModelsExport(models) {\n    let code = ``\n    code += `module.exports = {\\n`\n\n    models.forEach(model => code += `   ${model.name}: require('./${model.name}'),\\n`)\n    code += `   InputMessageContent: require('./InputMessageContent'),\\n`\n    code += `   InlineQueryResult: require('./InlineQueryResult'),\\n`\n\n    code += '}'\n\n    return code\n}","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/api-scheme/models/ModelsGenerator.js":"'use strict'\n\nconst SchemeClassField = require('./SchemeClassField')\nconst SchemeClass = require('./SchemeClass')\nconst cheerio = require('cheerio')\n\nconst JS_TYPES = {\n    Integer: 'number',\n    String: 'string',\n    Float: 'number',\n    'Float number': 'number',\n    Boolean: 'boolean',\n    True: 'boolean',\n    False: 'boolean'\n}\n\nclass ModelsGenerator {\n    /**\n     *\n     * @param {string} docPageData\n     */\n    constructor(docPageData) {\n        this._docPageData = docPageData\n    }\n\n    /**\n     *\n     * @returns {SchemeClass[]}\n     */\n    generateModels() {\n        let models = []\n\n        let scheme = this._generateScheme()\n\n        scheme.forEach(model => {\n            models.push(new SchemeClass(\n                model.name,\n                this._prepareFields(model.fields),\n                model.desc\n            ))\n        })\n\n        return models\n    }\n\n    /**\n     *\n     * @param {string} table\n     * @returns {SchemeClassField[]}\n     * @private\n     */\n    _prepareFields(raw) {\n        let fields = []\n\n\n\n        raw.forEach(item => {\n            let type = this._prepareType(item.type)\n\n            fields.push(new SchemeClassField(\n                item.field,\n                type,\n                item.type.indexOf('Array of Array of') > -1 ? '2d array' : (item.type.indexOf('Array of') > -1 ? 'array' : ''),\n                this._isStandart(item.type),\n                !item.required,\n                item.desc\n            ))\n        })\n\n        return fields\n    }\n\n    _prepareType(type) {\n        type = type.replace('Array of Array of ', '').replace('Array of ', '')\n\n        if (JS_TYPES[type]) {\n            return JS_TYPES[type]\n        }\n\n        return type\n    }\n\n    _isStandart(type) {\n        type = type.replace('Array of Array of ', '').replace('Array of ', '')\n\n        if (JS_TYPES[type]) {\n            return true\n        }\n\n        return false\n    }\n\n\n    _generateScheme() {\n        let $ = cheerio.load(this._docPageData)\n\n        const apiScheme = []\n\n        $(\"h4\").each((index, el) => {\n            const nextTag = $(el).next().prop(\"tagName\")\n            const nextNextTag = $(el).next().next().prop(\"tagName\")\n            const nextNextNextTag = $(el).next().next().next().prop(\"tagName\")\n\n            if (\n                nextTag == 'P' &&\n                ( nextNextTag == 'TABLE'\n                || nextNextTag == 'BLOCKQUOTE' && nextNextNextTag == 'TABLE')\n            ) {\n                let isModel = true\n                var model = {}\n\n                model.name = $(el).text()\n                model.desc = $(el).next().text()\n                model.fields = []\n\n                if (nextNextTag == 'TABLE') var table =  $(el).next().next().children().children()\n                if (nextNextTag == 'BLOCKQUOTE') var table =  $(el).next().next().next().children().children()\n\n\n                table.each((i, item) => {\n                    let fieldRaw = []\n\n                    $(item).children().each((i, line) => fieldRaw.push($(line).text()))\n\n                    if (i === 0) {\n                        isModel = fieldRaw[0] == \"Field\"\n                        return\n                    }\n\n                    let field = {}\n                    field.field = fieldRaw[0]\n                    field.type  = fieldRaw[1]\n\n                    if (isModel) {\n                        const optionalRegexp = fieldRaw[2].match(/^Optional. (.*)$/)\n\n                        if (optionalRegexp != null) {\n                            fieldRaw[3] = optionalRegexp[1]\n                        } else {\n                            fieldRaw[3] = fieldRaw[2]\n                            fieldRaw[2] = true\n                        }\n                    }\n\n                    field.required = fieldRaw[2] == true\n                    field.desc = fieldRaw[3]\n\n                    model.fields.push(field)\n                })\n\n                if (isModel) apiScheme.push(model)\n            }\n        })\n\n        return apiScheme\n    }\n}\n\nmodule.exports = ModelsGenerator","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/api-scheme/models/SchemeClassField.js":"'use strict'\n\nclass SchemeClassField {\n    /**\n     *\n     * @param {string} name\n     * @param {string} typeName\n     * @param {string} type\n     * @param {boolean} isStandartType\n     * @param {boolean} isOptional\n     * @param {string} description\n     */\n    constructor(name, typeName, type, isStandartType, isOptional, description) {\n        this._name = name\n        this._typeName = typeName\n        this._type = type\n        this._isStandartType = isStandartType\n        this._isOptional = isOptional\n        this._nameCamelCase = this._toCamelCase(this.name)\n        this._renderedType = this._renderType(typeName, type)\n        this._description = description\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    get name() {\n        return this._name\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    get nameCamelCase() {\n        return this._nameCamelCase\n    }\n\n    /**\n     * \n     * @returns {string}\n     */\n    get type() {\n        return this._type\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    get typeName() {\n        return this._typeName\n    }\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    get isOptional() {\n        return this._isOptional\n    }\n\n    /**\n     * \n     * @returns {boolean}\n     */\n    get isStandartType() {\n        return this._isStandartType\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    get renderedType() {\n        return this._renderedType\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    get description() {\n        return this._description\n    }\n\n    /**\n     *\n     * @param {string} str\n     * @returns {string}\n     * @private\n     */\n    _toCamelCase(str) {\n        const parts = str.split('_')\n\n        if (!parts.length) return str\n\n        const capitalized = parts.slice(1).map(part => part[0].toUpperCase() + part.substr(1))\n\n        capitalized.unshift(parts[0]);\n\n        return capitalized.join('')\n    }\n\n    /**\n     *\n     * @param {string} typeName\n     * @param {string} type\n     * @returns {string}\n     * @private\n     */\n    _renderType(typeName, type) {\n        if (type !== '') {\n            switch (type) {\n                case 'array':\n                    return `${typeName}[]`\n                break\n\n                case '2d array':\n                    return `${typeName}[][]`\n                break\n            }\n        }\n\n        return typeName\n    }\n}\n\nmodule.exports = SchemeClassField","/home/travis/build/npmtest/node-npmtest-telegram-node-bot/node_modules/telegram-node-bot/api-scheme/models/SchemeClass.js":"'use strict'\n\nclass SchemeClass {\n    /**\n     * \n     * @param {string} name\n     * @param {SchemeClassField[]} fields\n     * @param {string} description\n     */\n    constructor(name, fields, description) {\n        this._name = name\n        this._fields = fields\n        this._description = description\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    get name() {\n        return this._name\n    }\n\n    /**\n     *\n     * @returns {SchemeClassField[]}\n     */\n    get fields() {\n        return this._fields\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    get description() {\n        return this._description\n    }\n    \n    /**\n     *\n     * @returns {string}\n     */\n    get modelCode() {\n        let code = ''\n\n        let extend = ''\n\n        if (this.name.indexOf('MessageContent') > -1) {\n            extend = `extends InputMessageContent `\n        }\n        if (this.name.indexOf('InlineQueryResult') > -1) {\n            extend = `extends InlineQueryResult `\n        }\n\n        code += \"'use strict'\\n\"\n        code += `\\n${this._generateRequirements()}`\n\n        code += `/**\\n`\n        code += ` * ${this.description}\\n`\n        code += ` */\\n\\n`\n\n        code += `class ${this.name} ${extend}{\\n`\n        code += `${this._generateConstructor()}\\n`\n\n        this.fields.forEach(field => code += `\\n${this._generateGetter(field)}\\n`)\n\n        code += `\\n${this._generateDeserializeMethod()}\\n`\n\n        code += `\\n${this._generateSerializeMethod()}\\n`\n        \n        code += `\\n${this._generateToJSONMethod()}\\n`\n\n        code += `}\\n\\n`\n\n        code += `module.exports = ${this.name}`\n\n        return code\n    }\n\n    /**\n     * \n     * @returns {string}\n     * @private\n     */\n    _generateConstructor() {\n        let fieldsNames = this.fields.map(field => field.nameCamelCase)\n\n        let code = ''\n\n        code += `   /**\\n`\n        code += `    *\\n`\n\n        this.fields.forEach(field => {\n            let paramType = field.isOptional ? `${field.renderedType}|null` : field.renderedType\n            code += `    * @param {${paramType}} ${field.isOptional ? '[' + field.nameCamelCase + ']' : field.nameCamelCase }\\n`\n        })\n\n        code += `   */\\n`\n\n        if (this.fields.length > 6) {\n            code += `   constructor(\\n     ${fieldsNames.join(', \\n     ')}\\n   ) {\\n`\n        }\n        else {\n            code += `   constructor(${fieldsNames.join(', ')}) {\\n`\n        }\n\n        if(this.name.indexOf('MessageContent') > -1 || this.name.indexOf('InlineQueryResult') > -1)\n            code += `       super()\\n`\n\n        fieldsNames.forEach(name => code += `       this._${name} = ${name}\\n`)\n        code += '   }'\n\n        return code\n    }\n\n    /**\n     * \n     * @param {SchemeClassField} field\n     * @returns {string}\n     * @private\n     */\n    _generateGetter(field) {\n        let code = ''\n\n        let returnType = field.isOptional ? `${field.renderedType}|null` : `${field.renderedType}`\n\n        code += `   /**\\n`\n        code += `    * ${field.description}\\n`\n        code += `    * @returns {${returnType}}\\n`\n        code += `   */\\n`\n\n        code += `   get ${field.nameCamelCase}() {\\n`\n        code += `       return this._${field.nameCamelCase}\\n`\n        code += `   }`\n\n        return code\n    }\n\n    /**\n     *\n     * @returns {string}\n     * @private\n     */\n    _generateDeserializeMethod() {\n        let code = ''\n\n        code += `   /**\\n`\n        code += `    *\\n`\n        code += `    * @param {Object} raw\\n`\n        code += `    * @returns {${this.name}}\\n`\n        code += `    */\\n`\n        code += `   static deserialize(raw) {\\n`\n\n        let args = this.fields.map(field => {\n            let raw = `raw['${field.name}']`\n\n            if (!field.isStandartType) {\n                if (field.type == '2d array') {\n                    return `${raw} ? ${raw}.map(arr => arr.map(item => ${field.typeName}.deserialize(item))) : null`\n                }\n                else if(field.type == 'array') {\n                    return `${raw} ? ${raw}.map(item => ${field.typeName}.deserialize(item)) : null`\n                }\n\n                return `${raw} ? ${field.typeName}.deserialize(${raw}) : null`\n            }\n\n            if (field.isOptional) {\n                return `${raw} ? ${raw} : null`\n            }\n\n            return raw\n        })\n\n        if (this.fields.length > 4) {\n            code += `      return new ${this.name}(\\n          ${args.join(', \\n          ')}\\n      )`\n        }\n        else {\n            code += `      return new ${this.name}(${args.join(', ')})`\n        }\n\n        code += `\\n   }`\n\n        return code\n    }\n\n    /**\n     *\n     * @returns {string}\n     * @private\n     */\n    _generateSerializeMethod() {\n        let code = ''\n\n        code += `   /**\\n`\n        code += `    *\\n`\n        code += `    * @returns {Object}\\n`\n        code += `    */\\n`\n        code += `   serialize() {\\n`\n\n        let obj = this.fields.map(field => {\n            let getter = `this.${field.nameCamelCase}`\n\n\n            if (!field.isStandartType) {\n                if (field.type == '') {\n                    return `${field.name}: ${getter} ? ${getter}.serialize() : undefined`\n                }\n                if (field.type == '2d array') {\n                    return `${field.name}: ${getter} ? ${getter}.map(arr => arr.map(item => item.serialize())) : undefined`\n                }\n                else if(field.type == 'array') {\n                    return `${field.name}: ${getter} ? ${getter}.map(item => item.serialize()) : undefined`\n                }\n            }\n\n            return `${field.name}: ${getter} ? ${getter} : undefined`\n        })\n\n\n        code += `      return { \\n          ${obj.join(', \\n          ')}\\n      }`\n\n\n        code += `\\n   }`\n\n        return code\n    }\n\n    /**\n     * @returns {string}\n     * @private\n     */\n    _generateRequirements() {\n        let code = ''\n        let renderedTypes = []\n\n        this.fields.forEach(field =>  {\n            let typeName = field.typeName\n\n            if (!field.isStandartType && renderedTypes.indexOf(typeName) == -1 && typeName != this.name) {\n                renderedTypes.push(typeName)\n\n                //because of typo here: https://core.telegram.org/bots/api#inlinequeryresultgif\n                const name = typeName[0].toUpperCase() + typeName.slice(1, typeName.length)\n\n                code += `const ${name} = require('./${name}')\\n`\n            }\n        })\n\n        if (this.name.indexOf('MessageContent') > -1) {\n            code += `const InputMessageContent = require('./InputMessageContent')`\n        }\n        if (this.name.indexOf('InlineQueryResult') > -1) {\n            code += `const InlineQueryResult = require('./InlineQueryResult')`\n        }\n\n        return code == '' ? '' : `${code}\\n`\n    }\n\n    /**\n     *\n     * @returns {string}\n     * @private\n     */\n    _generateToJSONMethod() {\n        let code = ''\n\n        code += `   /**\\n`\n        code += `    *\\n`\n        code += `    * @returns {string}\\n`\n        code += `    */\\n`\n        code += `   toJSON() {\\n`\n        code += `      return this.serialize()`\n        code += `\\n   }`\n\n        return code\n    }\n}\n\nmodule.exports = SchemeClass"}